{
    "Authentication": {
        "JwtSigningCertificate": "", // can be empty to use an auto generated development certificate; however, in production scenarios this should definitely be set! Vertical scaling will not work without a fix signing certificate, because each instance would generate its own certificate
        "JwtLifetimeInSeconds": 300
    },
    "Cors": {
        "AllowedOrigins": "",
        "ExposedHeaders": ""
    },
    "SwaggerUi": {
        "TokenUrl": "http://localhost:5000/connect/token",
        "Enabled": true
    },
    "Infrastructure": {
        "EventBus": {
            "Vendor": "RabbitMQ", // possible values: InMemory, RabbitMQ, GoogleCloud, Azure
            "ConnectionInfo": "rabbitmq",

            "RabbitMQUsername": "guest", // only available for RabbitMQ
            "RabbitMQPassword": "guest", // only available for RabbitMQ
            "ConnectionRetryCount": 5, // only available for RabbitMQ

            "GcpPubSubProjectId": "", // only available for Google Cloud Pub/Sub
            "GcpPubSubTopicName": "" // only available for Google Cloud Pub/Sub
        }
    },
    "Modules": {
        "Challenges": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=challenges;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=challenges;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                }
            }
        },
        "Quotas": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=quotas;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=quotas;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                }
            }
        },
        "Devices": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=devices;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=devices;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "PushNotifications": {
                    "Provider": "Dummy"
                }
            }
        },
        "Files": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=files;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=files;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Messages": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=messages;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=messages;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Relationships": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=relationships;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=relationships;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Synchronization": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=synchronization;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=synchronization;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Tokens": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "SqlServer",
                    "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=tokens;Password=Passw0rd;TrustServerCertificate=True"
                    //"ConnectionString": "User ID=tokens;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        }
    },
    "Serilog": {
        "Using": ["Serilog.Sinks.ApplicationInsights"],
        "MinimumLevel": {
            "Default": "Debug"
        },
        "Enrich": ["FromLogContext", "WithProcessId", "WithThreadId"],
        "WriteTo": [
            {
                "Name": "Console",
                "Args": {
                    "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff}|{Level} - CorrelationId:{CorrelationId} - RequestId:{RequestId} - RequestPath:{RequestPath} - Address:{identityAddress} - DeviceId:{deviceId} {NewLine}    {SourceContext}{NewLine}    {Message}{NewLine}{Exception}"
                }
            },
            {
                "Name": "ApplicationInsights",
                "Args": {
                    //"connectionString": "[your connection string here]",
                    "telemetryConverter": "Serilog.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights",
                    "outputTemplate": "[{Component}|{MachineName}|{ThreadId}] {Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] <{SourceContext}> {Message:lj}{NewLine}{Exception}"
                }
            }
        ]
    }
}
