// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Backbone.Modules.Devices.Infrastructure.CompiledModels.SqlServer
{
    public partial class DevicesDbContextModel
    {
        partial void Initialize()
        {
            var pnsRegistration = PnsRegistrationEntityType.Create(this);
            var tier = TierEntityType.Create(this);
            var challenge = ChallengeEntityType.Create(this);
            var applicationUser = ApplicationUserEntityType.Create(this);
            var device = DeviceEntityType.Create(this);
            var identity = IdentityEntityType.Create(this);
            var identityDeletionProcess = IdentityDeletionProcessEntityType.Create(this);
            var identityDeletionProcessAuditLogEntry = IdentityDeletionProcessAuditLogEntryEntityType.Create(this);
            var customOpenIddictEntityFrameworkCoreApplication = CustomOpenIddictEntityFrameworkCoreApplicationEntityType.Create(this);
            var customOpenIddictEntityFrameworkCoreAuthorization = CustomOpenIddictEntityFrameworkCoreAuthorizationEntityType.Create(this);
            var customOpenIddictEntityFrameworkCoreScope = CustomOpenIddictEntityFrameworkCoreScopeEntityType.Create(this);
            var customOpenIddictEntityFrameworkCoreToken = CustomOpenIddictEntityFrameworkCoreTokenEntityType.Create(this);
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);

            ApplicationUserEntityType.CreateForeignKey1(applicationUser, device);
            DeviceEntityType.CreateForeignKey1(device, identity);
            IdentityDeletionProcessEntityType.CreateForeignKey1(identityDeletionProcess, identity);
            IdentityDeletionProcessAuditLogEntryEntityType.CreateForeignKey1(identityDeletionProcessAuditLogEntry, identityDeletionProcess);
            CustomOpenIddictEntityFrameworkCoreApplicationEntityType.CreateForeignKey1(customOpenIddictEntityFrameworkCoreApplication, tier);
            CustomOpenIddictEntityFrameworkCoreAuthorizationEntityType.CreateForeignKey1(customOpenIddictEntityFrameworkCoreAuthorization, customOpenIddictEntityFrameworkCoreApplication);
            CustomOpenIddictEntityFrameworkCoreTokenEntityType.CreateForeignKey1(customOpenIddictEntityFrameworkCoreToken, customOpenIddictEntityFrameworkCoreApplication);
            CustomOpenIddictEntityFrameworkCoreTokenEntityType.CreateForeignKey2(customOpenIddictEntityFrameworkCoreToken, customOpenIddictEntityFrameworkCoreAuthorization);
            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);

            PnsRegistrationEntityType.CreateAnnotations(pnsRegistration);
            TierEntityType.CreateAnnotations(tier);
            ChallengeEntityType.CreateAnnotations(challenge);
            ApplicationUserEntityType.CreateAnnotations(applicationUser);
            DeviceEntityType.CreateAnnotations(device);
            IdentityEntityType.CreateAnnotations(identity);
            IdentityDeletionProcessEntityType.CreateAnnotations(identityDeletionProcess);
            IdentityDeletionProcessAuditLogEntryEntityType.CreateAnnotations(identityDeletionProcessAuditLogEntry);
            CustomOpenIddictEntityFrameworkCoreApplicationEntityType.CreateAnnotations(customOpenIddictEntityFrameworkCoreApplication);
            CustomOpenIddictEntityFrameworkCoreAuthorizationEntityType.CreateAnnotations(customOpenIddictEntityFrameworkCoreAuthorization);
            CustomOpenIddictEntityFrameworkCoreScopeEntityType.CreateAnnotations(customOpenIddictEntityFrameworkCoreScope);
            CustomOpenIddictEntityFrameworkCoreTokenEntityType.CreateAnnotations(customOpenIddictEntityFrameworkCoreToken);
            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var pnsRegistration = FindEntityType("Backbone.Modules.Devices.Domain.Aggregates.PushNotifications.PnsRegistration")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            pnsRegistration.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase = new TableBase("Backbone.Modules.Devices.Domain.Aggregates.PushNotifications.PnsRegistration", null, relationalModel);
            var appIdColumnBase = new ColumnBase<ColumnMappingBase>("AppId", "nvarchar(max)", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("AppId", appIdColumnBase);
            var deviceIdColumnBase = new ColumnBase<ColumnMappingBase>("DeviceId", "char(20)", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("DeviceId", deviceIdColumnBase);
            var devicePushIdentifierColumnBase = new ColumnBase<ColumnMappingBase>("DevicePushIdentifier", "char(20)", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("DevicePushIdentifier", devicePushIdentifierColumnBase);
            var environmentColumnBase = new ColumnBase<ColumnMappingBase>("Environment", "int", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("Environment", environmentColumnBase);
            var handleColumnBase = new ColumnBase<ColumnMappingBase>("Handle", "nvarchar(200)", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("Handle", handleColumnBase);
            var identityAddressColumnBase = new ColumnBase<ColumnMappingBase>("IdentityAddress", "char(36)", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("IdentityAddress", identityAddressColumnBase);
            var updatedAtColumnBase = new ColumnBase<ColumnMappingBase>("UpdatedAt", "datetime2", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.Columns.Add("UpdatedAt", updatedAtColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Aggregates.PushNotifications.PnsRegistration", backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase);
            var backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase = new TableMappingBase<ColumnMappingBase>(pnsRegistration, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase, true);
            backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationTableBase.AddTypeMapping(backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase, false);
            defaultTableMappings.Add(backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceIdColumnBase, pnsRegistration.FindProperty("DeviceId")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)appIdColumnBase, pnsRegistration.FindProperty("AppId")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)devicePushIdentifierColumnBase, pnsRegistration.FindProperty("DevicePushIdentifier")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)environmentColumnBase, pnsRegistration.FindProperty("Environment")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)handleColumnBase, pnsRegistration.FindProperty("Handle")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityAddressColumnBase, pnsRegistration.FindProperty("IdentityAddress")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)updatedAtColumnBase, pnsRegistration.FindProperty("UpdatedAt")!, backboneModulesDevicesDomainAggregatesPushNotificationsPnsRegistrationMappingBase);

            var tableMappings = new List<TableMapping>();
            pnsRegistration.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var pnsRegistrationsTable = new Table("PnsRegistrations", null, relationalModel);
            var deviceIdColumn = new Column("DeviceId", "char(20)", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("DeviceId", deviceIdColumn);
            var appIdColumn = new Column("AppId", "nvarchar(max)", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("AppId", appIdColumn);
            var devicePushIdentifierColumn = new Column("DevicePushIdentifier", "char(20)", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("DevicePushIdentifier", devicePushIdentifierColumn);
            var environmentColumn = new Column("Environment", "int", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("Environment", environmentColumn);
            var handleColumn = new Column("Handle", "nvarchar(200)", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("Handle", handleColumn);
            var identityAddressColumn = new Column("IdentityAddress", "char(36)", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("IdentityAddress", identityAddressColumn);
            var updatedAtColumn = new Column("UpdatedAt", "datetime2", pnsRegistrationsTable);
            pnsRegistrationsTable.Columns.Add("UpdatedAt", updatedAtColumn);
            var pK_PnsRegistrations = new UniqueConstraint("PK_PnsRegistrations", pnsRegistrationsTable, new[] { deviceIdColumn });
            pnsRegistrationsTable.PrimaryKey = pK_PnsRegistrations;
            var pK_PnsRegistrationsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Aggregates.PushNotifications.PnsRegistration",
                new[] { "DeviceId" });
            pK_PnsRegistrations.MappedKeys.Add(pK_PnsRegistrationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PnsRegistrationsUc).Add(pK_PnsRegistrations);
            pnsRegistrationsTable.UniqueConstraints.Add("PK_PnsRegistrations", pK_PnsRegistrations);
            relationalModel.Tables.Add(("PnsRegistrations", null), pnsRegistrationsTable);
            var pnsRegistrationsTableMapping = new TableMapping(pnsRegistration, pnsRegistrationsTable, true);
            pnsRegistrationsTable.AddTypeMapping(pnsRegistrationsTableMapping, false);
            tableMappings.Add(pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(deviceIdColumn, pnsRegistration.FindProperty("DeviceId")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(appIdColumn, pnsRegistration.FindProperty("AppId")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(devicePushIdentifierColumn, pnsRegistration.FindProperty("DevicePushIdentifier")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(environmentColumn, pnsRegistration.FindProperty("Environment")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(handleColumn, pnsRegistration.FindProperty("Handle")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(identityAddressColumn, pnsRegistration.FindProperty("IdentityAddress")!, pnsRegistrationsTableMapping);
            RelationalModel.CreateColumnMapping(updatedAtColumn, pnsRegistration.FindProperty("UpdatedAt")!, pnsRegistrationsTableMapping);

            var tier = FindEntityType("Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            tier.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var backboneModulesDevicesDomainAggregatesTierTierTableBase = new TableBase("Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesDevicesDomainAggregatesTierTierTableBase);
            backboneModulesDevicesDomainAggregatesTierTierTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(30)", backboneModulesDevicesDomainAggregatesTierTierTableBase);
            backboneModulesDevicesDomainAggregatesTierTierTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier", backboneModulesDevicesDomainAggregatesTierTierTableBase);
            var backboneModulesDevicesDomainAggregatesTierTierMappingBase = new TableMappingBase<ColumnMappingBase>(tier, backboneModulesDevicesDomainAggregatesTierTierTableBase, true);
            backboneModulesDevicesDomainAggregatesTierTierTableBase.AddTypeMapping(backboneModulesDevicesDomainAggregatesTierTierMappingBase, false);
            defaultTableMappings0.Add(backboneModulesDevicesDomainAggregatesTierTierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, tier.FindProperty("Id")!, backboneModulesDevicesDomainAggregatesTierTierMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, tier.FindProperty("Name")!, backboneModulesDevicesDomainAggregatesTierTierMappingBase);

            var tableMappings0 = new List<TableMapping>();
            tier.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var tiersTable = new Table("Tiers", null, relationalModel);
            var idColumn = new Column("Id", "char(20)", tiersTable);
            tiersTable.Columns.Add("Id", idColumn);
            var nameColumn = new Column("Name", "nvarchar(30)", tiersTable);
            tiersTable.Columns.Add("Name", nameColumn);
            var pK_Tiers = new UniqueConstraint("PK_Tiers", tiersTable, new[] { idColumn });
            tiersTable.PrimaryKey = pK_Tiers;
            var pK_TiersUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier",
                new[] { "Id" });
            pK_Tiers.MappedKeys.Add(pK_TiersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TiersUc).Add(pK_Tiers);
            tiersTable.UniqueConstraints.Add("PK_Tiers", pK_Tiers);
            var iX_Tiers_Name = new TableIndex(
            "IX_Tiers_Name", tiersTable, new[] { nameColumn }, true);
            var iX_Tiers_NameIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier",
                new[] { "Name" });
            iX_Tiers_Name.MappedIndexes.Add(iX_Tiers_NameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Tiers_NameIx).Add(iX_Tiers_Name);
            tiersTable.Indexes.Add("IX_Tiers_Name", iX_Tiers_Name);
            relationalModel.Tables.Add(("Tiers", null), tiersTable);
            var tiersTableMapping = new TableMapping(tier, tiersTable, true);
            tiersTable.AddTypeMapping(tiersTableMapping, false);
            tableMappings0.Add(tiersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, tier.FindProperty("Id")!, tiersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, tier.FindProperty("Name")!, tiersTableMapping);

            var challenge = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Challenge")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            challenge.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var backboneModulesDevicesDomainEntitiesChallengeTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Challenge", null, relationalModel);
            var expiresAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpiresAt", "datetime2", backboneModulesDevicesDomainEntitiesChallengeTableBase);
            backboneModulesDevicesDomainEntitiesChallengeTableBase.Columns.Add("ExpiresAt", expiresAtColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesDevicesDomainEntitiesChallengeTableBase);
            backboneModulesDevicesDomainEntitiesChallengeTableBase.Columns.Add("Id", idColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Challenge", backboneModulesDevicesDomainEntitiesChallengeTableBase);
            var backboneModulesDevicesDomainEntitiesChallengeMappingBase = new TableMappingBase<ColumnMappingBase>(challenge, backboneModulesDevicesDomainEntitiesChallengeTableBase, true);
            backboneModulesDevicesDomainEntitiesChallengeTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesChallengeMappingBase, false);
            defaultTableMappings1.Add(backboneModulesDevicesDomainEntitiesChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, challenge.FindProperty("Id")!, backboneModulesDevicesDomainEntitiesChallengeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresAtColumnBase, challenge.FindProperty("ExpiresAt")!, backboneModulesDevicesDomainEntitiesChallengeMappingBase);

            var tableMappings1 = new List<TableMapping>();
            challenge.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var challengesTable = new Table("Challenges", "Challenges", relationalModel);
            var idColumn0 = new Column("Id", "char(20)", challengesTable);
            challengesTable.Columns.Add("Id", idColumn0);
            var expiresAtColumn = new Column("ExpiresAt", "datetime2", challengesTable);
            challengesTable.Columns.Add("ExpiresAt", expiresAtColumn);
            var pK_Challenges = new UniqueConstraint("PK_Challenges", challengesTable, new[] { idColumn0 });
            challengesTable.PrimaryKey = pK_Challenges;
            var pK_ChallengesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Challenge",
                new[] { "Id" });
            pK_Challenges.MappedKeys.Add(pK_ChallengesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChallengesUc).Add(pK_Challenges);
            challengesTable.UniqueConstraints.Add("PK_Challenges", pK_Challenges);
            relationalModel.Tables.Add(("Challenges", "Challenges"), challengesTable);
            var challengesTableMapping = new TableMapping(challenge, challengesTable, true);
            challengesTable.AddTypeMapping(challengesTableMapping, false);
            tableMappings1.Add(challengesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, challenge.FindProperty("Id")!, challengesTableMapping);
            RelationalModel.CreateColumnMapping(expiresAtColumn, challenge.FindProperty("ExpiresAt")!, challengesTableMapping);

            var applicationUser = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "int", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var deviceIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DeviceId", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("DeviceId", deviceIdColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("Id", idColumnBase1);
            var lastLoginAtColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("LastLoginAt", lastLoginAtColumnBase);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "bit", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "datetimeoffset", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "nvarchar(256)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "nvarchar(max)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "nvarchar(max)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser", backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase);
            var backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase, true);
            backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase, false);
            defaultTableMappings2.Add(backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, applicationUser.FindProperty("Id")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, applicationUser.FindProperty("AccessFailedCount")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, applicationUser.FindProperty("ConcurrencyStamp")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, applicationUser.FindProperty("CreatedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceIdColumnBase0, applicationUser.FindProperty("DeviceId")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginAtColumnBase, applicationUser.FindProperty("LastLoginAt")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, applicationUser.FindProperty("LockoutEnd")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, applicationUser.FindProperty("PasswordHash")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, applicationUser.FindProperty("SecurityStamp")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, applicationUser.FindProperty("UserName")!, backboneModulesDevicesDomainEntitiesIdentitiesApplicationUserMappingBase);

            var tableMappings2 = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn1 = new Column("Id", "nvarchar(450)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn1);
            var accessFailedCountColumn = new Column("AccessFailedCount", "int", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("CreatedAt", createdAtColumn);
            var deviceIdColumn0 = new Column("DeviceId", "char(20)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("DeviceId", deviceIdColumn0);
            var lastLoginAtColumn = new Column("LastLoginAt", "datetime2", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLoginAt", lastLoginAtColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "datetimeoffset", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var securityStampColumn = new Column("SecurityStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var userNameColumn = new Column("UserName", "char(20)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn1 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var iX_AspNetUsers_DeviceId = new TableIndex(
            "IX_AspNetUsers_DeviceId", aspNetUsersTable, new[] { deviceIdColumn0 }, true);
            var iX_AspNetUsers_DeviceIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "DeviceId" });
            iX_AspNetUsers_DeviceId.MappedIndexes.Add(iX_AspNetUsers_DeviceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUsers_DeviceIdIx).Add(iX_AspNetUsers_DeviceId);
            aspNetUsersTable.Indexes.Add("IX_AspNetUsers_DeviceId", iX_AspNetUsers_DeviceId);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(applicationUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings2.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, applicationUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, applicationUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, applicationUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, applicationUser.FindProperty("CreatedAt")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(deviceIdColumn0, applicationUser.FindProperty("DeviceId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginAtColumn, applicationUser.FindProperty("LastLoginAt")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, applicationUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, applicationUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, applicationUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, applicationUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, applicationUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, applicationUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var device = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Identities.Device")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            device.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Identities.Device", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("CreatedByDevice", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("CreatedByDevice", createdByDeviceColumnBase);
            var deletedAtColumnBase = new ColumnBase<ColumnMappingBase>("DeletedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("DeletedAt", deletedAtColumnBase);
            var deletedByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("DeletedByDevice", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("DeletedByDevice", deletedByDeviceColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("Id", idColumnBase2);
            var identityAddressColumnBase0 = new ColumnBase<ColumnMappingBase>("IdentityAddress", "char(36)", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.Columns.Add("IdentityAddress", identityAddressColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Identities.Device", backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase);
            var backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase = new TableMappingBase<ColumnMappingBase>(device, backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase, true);
            backboneModulesDevicesDomainEntitiesIdentitiesDeviceTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase, false);
            defaultTableMappings3.Add(backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, device.FindProperty("Id")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, device.FindProperty("CreatedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByDeviceColumnBase, device.FindProperty("CreatedByDevice")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase, device.FindProperty("DeletedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedByDeviceColumnBase, device.FindProperty("DeletedByDevice")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityAddressColumnBase0, device.FindProperty("IdentityAddress")!, backboneModulesDevicesDomainEntitiesIdentitiesDeviceMappingBase);

            var tableMappings3 = new List<TableMapping>();
            device.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var devicesTable = new Table("Devices", null, relationalModel);
            var idColumn2 = new Column("Id", "char(20)", devicesTable);
            devicesTable.Columns.Add("Id", idColumn2);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", devicesTable);
            devicesTable.Columns.Add("CreatedAt", createdAtColumn0);
            var createdByDeviceColumn = new Column("CreatedByDevice", "char(20)", devicesTable);
            devicesTable.Columns.Add("CreatedByDevice", createdByDeviceColumn);
            var deletedAtColumn = new Column("DeletedAt", "datetime2", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("DeletedAt", deletedAtColumn);
            var deletedByDeviceColumn = new Column("DeletedByDevice", "char(20)", devicesTable)
            {
                IsNullable = true
            };
            devicesTable.Columns.Add("DeletedByDevice", deletedByDeviceColumn);
            var identityAddressColumn0 = new Column("IdentityAddress", "char(36)", devicesTable);
            devicesTable.Columns.Add("IdentityAddress", identityAddressColumn0);
            var pK_Devices = new UniqueConstraint("PK_Devices", devicesTable, new[] { idColumn2 });
            devicesTable.PrimaryKey = pK_Devices;
            var pK_DevicesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.Device",
                new[] { "Id" });
            pK_Devices.MappedKeys.Add(pK_DevicesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DevicesUc).Add(pK_Devices);
            devicesTable.UniqueConstraints.Add("PK_Devices", pK_Devices);
            var iX_Devices_IdentityAddress = new TableIndex(
            "IX_Devices_IdentityAddress", devicesTable, new[] { identityAddressColumn0 }, false);
            var iX_Devices_IdentityAddressIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.Device",
                new[] { "IdentityAddress" });
            iX_Devices_IdentityAddress.MappedIndexes.Add(iX_Devices_IdentityAddressIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Devices_IdentityAddressIx).Add(iX_Devices_IdentityAddress);
            devicesTable.Indexes.Add("IX_Devices_IdentityAddress", iX_Devices_IdentityAddress);
            relationalModel.Tables.Add(("Devices", null), devicesTable);
            var devicesTableMapping = new TableMapping(device, devicesTable, true);
            devicesTable.AddTypeMapping(devicesTableMapping, false);
            tableMappings3.Add(devicesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, device.FindProperty("Id")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, device.FindProperty("CreatedAt")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(createdByDeviceColumn, device.FindProperty("CreatedByDevice")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn, device.FindProperty("DeletedAt")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(deletedByDeviceColumn, device.FindProperty("DeletedByDevice")!, devicesTableMapping);
            RelationalModel.CreateColumnMapping(identityAddressColumn0, device.FindProperty("IdentityAddress")!, devicesTableMapping);

            var identity = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Identities.Identity")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Identities.Identity", null, relationalModel);
            var addressColumnBase = new ColumnBase<ColumnMappingBase>("Address", "char(36)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("Address", addressColumnBase);
            var clientIdColumnBase = new ColumnBase<ColumnMappingBase>("ClientId", "nvarchar(200)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("ClientId", clientIdColumnBase);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var deletionGracePeriodEndsAtColumnBase = new ColumnBase<ColumnMappingBase>("DeletionGracePeriodEndsAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("DeletionGracePeriodEndsAt", deletionGracePeriodEndsAtColumnBase);
            var identityVersionColumnBase = new ColumnBase<ColumnMappingBase>("IdentityVersion", "tinyint", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("IdentityVersion", identityVersionColumnBase);
            var publicKeyColumnBase = new ColumnBase<ColumnMappingBase>("PublicKey", "varbinary(max)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("PublicKey", publicKeyColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "int", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("Status", statusColumnBase);
            var tierIdColumnBase = new ColumnBase<ColumnMappingBase>("TierId", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.Columns.Add("TierId", tierIdColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Identities.Identity", backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase = new TableMappingBase<ColumnMappingBase>(identity, backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase, true);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase, false);
            defaultTableMappings4.Add(backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase, identity.FindProperty("Address")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase, identity.FindProperty("ClientId")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, identity.FindProperty("CreatedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletionGracePeriodEndsAtColumnBase, identity.FindProperty("DeletionGracePeriodEndsAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityVersionColumnBase, identity.FindProperty("IdentityVersion")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publicKeyColumnBase, identity.FindProperty("PublicKey")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, identity.FindProperty("Status")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierIdColumnBase, identity.FindProperty("TierId")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var identitiesTable = new Table("Identities", null, relationalModel);
            var addressColumn = new Column("Address", "char(36)", identitiesTable);
            identitiesTable.Columns.Add("Address", addressColumn);
            var clientIdColumn = new Column("ClientId", "nvarchar(200)", identitiesTable)
            {
                IsNullable = true
            };
            identitiesTable.Columns.Add("ClientId", clientIdColumn);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", identitiesTable);
            identitiesTable.Columns.Add("CreatedAt", createdAtColumn1);
            var deletionGracePeriodEndsAtColumn = new Column("DeletionGracePeriodEndsAt", "datetime2", identitiesTable)
            {
                IsNullable = true
            };
            identitiesTable.Columns.Add("DeletionGracePeriodEndsAt", deletionGracePeriodEndsAtColumn);
            var identityVersionColumn = new Column("IdentityVersion", "tinyint", identitiesTable);
            identitiesTable.Columns.Add("IdentityVersion", identityVersionColumn);
            var publicKeyColumn = new Column("PublicKey", "varbinary(max)", identitiesTable);
            identitiesTable.Columns.Add("PublicKey", publicKeyColumn);
            var statusColumn = new Column("Status", "int", identitiesTable);
            identitiesTable.Columns.Add("Status", statusColumn);
            var tierIdColumn = new Column("TierId", "char(20)", identitiesTable)
            {
                IsNullable = true
            };
            identitiesTable.Columns.Add("TierId", tierIdColumn);
            var pK_Identities = new UniqueConstraint("PK_Identities", identitiesTable, new[] { addressColumn });
            identitiesTable.PrimaryKey = pK_Identities;
            var pK_IdentitiesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.Identity",
                new[] { "Address" });
            pK_Identities.MappedKeys.Add(pK_IdentitiesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IdentitiesUc).Add(pK_Identities);
            identitiesTable.UniqueConstraints.Add("PK_Identities", pK_Identities);
            relationalModel.Tables.Add(("Identities", null), identitiesTable);
            var identitiesTableMapping = new TableMapping(identity, identitiesTable, true);
            identitiesTable.AddTypeMapping(identitiesTableMapping, false);
            tableMappings4.Add(identitiesTableMapping);
            RelationalModel.CreateColumnMapping(addressColumn, identity.FindProperty("Address")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn, identity.FindProperty("ClientId")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, identity.FindProperty("CreatedAt")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(deletionGracePeriodEndsAtColumn, identity.FindProperty("DeletionGracePeriodEndsAt")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(identityVersionColumn, identity.FindProperty("IdentityVersion")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(publicKeyColumn, identity.FindProperty("PublicKey")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, identity.FindProperty("Status")!, identitiesTableMapping);
            RelationalModel.CreateColumnMapping(tierIdColumn, identity.FindProperty("TierId")!, identitiesTableMapping);

            var identityDeletionProcess = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            identityDeletionProcess.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess", null, relationalModel);
            var approvalReminder1SentAtColumnBase = new ColumnBase<ColumnMappingBase>("ApprovalReminder1SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("ApprovalReminder1SentAt", approvalReminder1SentAtColumnBase);
            var approvalReminder2SentAtColumnBase = new ColumnBase<ColumnMappingBase>("ApprovalReminder2SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("ApprovalReminder2SentAt", approvalReminder2SentAtColumnBase);
            var approvalReminder3SentAtColumnBase = new ColumnBase<ColumnMappingBase>("ApprovalReminder3SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("ApprovalReminder3SentAt", approvalReminder3SentAtColumnBase);
            var approvedAtColumnBase = new ColumnBase<ColumnMappingBase>("ApprovedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("ApprovedAt", approvedAtColumnBase);
            var approvedByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("ApprovedByDevice", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("ApprovedByDevice", approvedByDeviceColumnBase);
            var createdAtColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("CreatedAt", createdAtColumnBase2);
            var gracePeriodEndsAtColumnBase = new ColumnBase<ColumnMappingBase>("GracePeriodEndsAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("GracePeriodEndsAt", gracePeriodEndsAtColumnBase);
            var gracePeriodReminder1SentAtColumnBase = new ColumnBase<ColumnMappingBase>("GracePeriodReminder1SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("GracePeriodReminder1SentAt", gracePeriodReminder1SentAtColumnBase);
            var gracePeriodReminder2SentAtColumnBase = new ColumnBase<ColumnMappingBase>("GracePeriodReminder2SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("GracePeriodReminder2SentAt", gracePeriodReminder2SentAtColumnBase);
            var gracePeriodReminder3SentAtColumnBase = new ColumnBase<ColumnMappingBase>("GracePeriodReminder3SentAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("GracePeriodReminder3SentAt", gracePeriodReminder3SentAtColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("Id", idColumnBase3);
            var identityAddressColumnBase1 = new ColumnBase<ColumnMappingBase>("IdentityAddress", "char(36)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("IdentityAddress", identityAddressColumnBase1);
            var statusColumnBase0 = new ColumnBase<ColumnMappingBase>("Status", "int", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.Columns.Add("Status", statusColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase = new TableMappingBase<ColumnMappingBase>(identityDeletionProcess, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase, true);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase, false);
            defaultTableMappings5.Add(backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, identityDeletionProcess.FindProperty("Id")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approvalReminder1SentAtColumnBase, identityDeletionProcess.FindProperty("ApprovalReminder1SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approvalReminder2SentAtColumnBase, identityDeletionProcess.FindProperty("ApprovalReminder2SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approvalReminder3SentAtColumnBase, identityDeletionProcess.FindProperty("ApprovalReminder3SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approvedAtColumnBase, identityDeletionProcess.FindProperty("ApprovedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)approvedByDeviceColumnBase, identityDeletionProcess.FindProperty("ApprovedByDevice")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase2, identityDeletionProcess.FindProperty("CreatedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gracePeriodEndsAtColumnBase, identityDeletionProcess.FindProperty("GracePeriodEndsAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gracePeriodReminder1SentAtColumnBase, identityDeletionProcess.FindProperty("GracePeriodReminder1SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gracePeriodReminder2SentAtColumnBase, identityDeletionProcess.FindProperty("GracePeriodReminder2SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)gracePeriodReminder3SentAtColumnBase, identityDeletionProcess.FindProperty("GracePeriodReminder3SentAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityAddressColumnBase1, identityDeletionProcess.FindProperty("IdentityAddress")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, identityDeletionProcess.FindProperty("Status")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessMappingBase);

            var tableMappings5 = new List<TableMapping>();
            identityDeletionProcess.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var identityDeletionProcessesTable = new Table("IdentityDeletionProcesses", null, relationalModel);
            var idColumn3 = new Column("Id", "char(20)", identityDeletionProcessesTable);
            identityDeletionProcessesTable.Columns.Add("Id", idColumn3);
            var approvalReminder1SentAtColumn = new Column("ApprovalReminder1SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("ApprovalReminder1SentAt", approvalReminder1SentAtColumn);
            var approvalReminder2SentAtColumn = new Column("ApprovalReminder2SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("ApprovalReminder2SentAt", approvalReminder2SentAtColumn);
            var approvalReminder3SentAtColumn = new Column("ApprovalReminder3SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("ApprovalReminder3SentAt", approvalReminder3SentAtColumn);
            var approvedAtColumn = new Column("ApprovedAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("ApprovedAt", approvedAtColumn);
            var approvedByDeviceColumn = new Column("ApprovedByDevice", "char(20)", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("ApprovedByDevice", approvedByDeviceColumn);
            var createdAtColumn2 = new Column("CreatedAt", "datetime2", identityDeletionProcessesTable);
            identityDeletionProcessesTable.Columns.Add("CreatedAt", createdAtColumn2);
            var gracePeriodEndsAtColumn = new Column("GracePeriodEndsAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("GracePeriodEndsAt", gracePeriodEndsAtColumn);
            var gracePeriodReminder1SentAtColumn = new Column("GracePeriodReminder1SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("GracePeriodReminder1SentAt", gracePeriodReminder1SentAtColumn);
            var gracePeriodReminder2SentAtColumn = new Column("GracePeriodReminder2SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("GracePeriodReminder2SentAt", gracePeriodReminder2SentAtColumn);
            var gracePeriodReminder3SentAtColumn = new Column("GracePeriodReminder3SentAt", "datetime2", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("GracePeriodReminder3SentAt", gracePeriodReminder3SentAtColumn);
            var identityAddressColumn1 = new Column("IdentityAddress", "char(36)", identityDeletionProcessesTable)
            {
                IsNullable = true
            };
            identityDeletionProcessesTable.Columns.Add("IdentityAddress", identityAddressColumn1);
            var statusColumn0 = new Column("Status", "int", identityDeletionProcessesTable);
            identityDeletionProcessesTable.Columns.Add("Status", statusColumn0);
            var pK_IdentityDeletionProcesses = new UniqueConstraint("PK_IdentityDeletionProcesses", identityDeletionProcessesTable, new[] { idColumn3 });
            identityDeletionProcessesTable.PrimaryKey = pK_IdentityDeletionProcesses;
            var pK_IdentityDeletionProcessesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess",
                new[] { "Id" });
            pK_IdentityDeletionProcesses.MappedKeys.Add(pK_IdentityDeletionProcessesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IdentityDeletionProcessesUc).Add(pK_IdentityDeletionProcesses);
            identityDeletionProcessesTable.UniqueConstraints.Add("PK_IdentityDeletionProcesses", pK_IdentityDeletionProcesses);
            var iX_IdentityDeletionProcesses_IdentityAddress = new TableIndex(
            "IX_IdentityDeletionProcesses_IdentityAddress", identityDeletionProcessesTable, new[] { identityAddressColumn1 }, false);
            var iX_IdentityDeletionProcesses_IdentityAddressIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess",
                new[] { "IdentityAddress" });
            iX_IdentityDeletionProcesses_IdentityAddress.MappedIndexes.Add(iX_IdentityDeletionProcesses_IdentityAddressIx);
            RelationalModel.GetOrCreateTableIndexes(iX_IdentityDeletionProcesses_IdentityAddressIx).Add(iX_IdentityDeletionProcesses_IdentityAddress);
            identityDeletionProcessesTable.Indexes.Add("IX_IdentityDeletionProcesses_IdentityAddress", iX_IdentityDeletionProcesses_IdentityAddress);
            relationalModel.Tables.Add(("IdentityDeletionProcesses", null), identityDeletionProcessesTable);
            var identityDeletionProcessesTableMapping = new TableMapping(identityDeletionProcess, identityDeletionProcessesTable, true);
            identityDeletionProcessesTable.AddTypeMapping(identityDeletionProcessesTableMapping, false);
            tableMappings5.Add(identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, identityDeletionProcess.FindProperty("Id")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(approvalReminder1SentAtColumn, identityDeletionProcess.FindProperty("ApprovalReminder1SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(approvalReminder2SentAtColumn, identityDeletionProcess.FindProperty("ApprovalReminder2SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(approvalReminder3SentAtColumn, identityDeletionProcess.FindProperty("ApprovalReminder3SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(approvedAtColumn, identityDeletionProcess.FindProperty("ApprovedAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(approvedByDeviceColumn, identityDeletionProcess.FindProperty("ApprovedByDevice")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn2, identityDeletionProcess.FindProperty("CreatedAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(gracePeriodEndsAtColumn, identityDeletionProcess.FindProperty("GracePeriodEndsAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(gracePeriodReminder1SentAtColumn, identityDeletionProcess.FindProperty("GracePeriodReminder1SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(gracePeriodReminder2SentAtColumn, identityDeletionProcess.FindProperty("GracePeriodReminder2SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(gracePeriodReminder3SentAtColumn, identityDeletionProcess.FindProperty("GracePeriodReminder3SentAt")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(identityAddressColumn1, identityDeletionProcess.FindProperty("IdentityAddress")!, identityDeletionProcessesTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn0, identityDeletionProcess.FindProperty("Status")!, identityDeletionProcessesTableMapping);

            var identityDeletionProcessAuditLogEntry = FindEntityType("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            identityDeletionProcessAuditLogEntry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase = new TableBase("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry", null, relationalModel);
            var createdAtColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("CreatedAt", createdAtColumnBase3);
            var deviceIdHashColumnBase = new ColumnBase<ColumnMappingBase>("DeviceIdHash", "varbinary(max)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("DeviceIdHash", deviceIdHashColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("Id", idColumnBase4);
            var identityAddressHashColumnBase = new ColumnBase<ColumnMappingBase>("IdentityAddressHash", "varbinary(max)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("IdentityAddressHash", identityAddressHashColumnBase);
            var identityDeletionProcessIdColumnBase = new ColumnBase<ColumnMappingBase>("IdentityDeletionProcessId", "char(20)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("IdentityDeletionProcessId", identityDeletionProcessIdColumnBase);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("Message", "nvarchar(max)", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("Message", messageColumnBase);
            var newStatusColumnBase = new ColumnBase<ColumnMappingBase>("NewStatus", "int", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("NewStatus", newStatusColumnBase);
            var oldStatusColumnBase = new ColumnBase<ColumnMappingBase>("OldStatus", "int", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.Columns.Add("OldStatus", oldStatusColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry", backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase);
            var backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase = new TableMappingBase<ColumnMappingBase>(identityDeletionProcessAuditLogEntry, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase, true);
            backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryTableBase.AddTypeMapping(backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase, false);
            defaultTableMappings6.Add(backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, identityDeletionProcessAuditLogEntry.FindProperty("Id")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase3, identityDeletionProcessAuditLogEntry.FindProperty("CreatedAt")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceIdHashColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("DeviceIdHash")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityAddressHashColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("IdentityAddressHash")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityDeletionProcessIdColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("IdentityDeletionProcessId")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("Message")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)newStatusColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("NewStatus")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)oldStatusColumnBase, identityDeletionProcessAuditLogEntry.FindProperty("OldStatus")!, backboneModulesDevicesDomainEntitiesIdentitiesIdentityDeletionProcessAuditLogEntryMappingBase);

            var tableMappings6 = new List<TableMapping>();
            identityDeletionProcessAuditLogEntry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var identityDeletionProcessAuditLogTable = new Table("IdentityDeletionProcessAuditLog", null, relationalModel);
            var idColumn4 = new Column("Id", "char(20)", identityDeletionProcessAuditLogTable);
            identityDeletionProcessAuditLogTable.Columns.Add("Id", idColumn4);
            var createdAtColumn3 = new Column("CreatedAt", "datetime2", identityDeletionProcessAuditLogTable);
            identityDeletionProcessAuditLogTable.Columns.Add("CreatedAt", createdAtColumn3);
            var deviceIdHashColumn = new Column("DeviceIdHash", "varbinary(max)", identityDeletionProcessAuditLogTable)
            {
                IsNullable = true
            };
            identityDeletionProcessAuditLogTable.Columns.Add("DeviceIdHash", deviceIdHashColumn);
            var identityAddressHashColumn = new Column("IdentityAddressHash", "varbinary(max)", identityDeletionProcessAuditLogTable);
            identityDeletionProcessAuditLogTable.Columns.Add("IdentityAddressHash", identityAddressHashColumn);
            var identityDeletionProcessIdColumn = new Column("IdentityDeletionProcessId", "char(20)", identityDeletionProcessAuditLogTable)
            {
                IsNullable = true
            };
            identityDeletionProcessAuditLogTable.Columns.Add("IdentityDeletionProcessId", identityDeletionProcessIdColumn);
            var messageColumn = new Column("Message", "nvarchar(max)", identityDeletionProcessAuditLogTable);
            identityDeletionProcessAuditLogTable.Columns.Add("Message", messageColumn);
            var newStatusColumn = new Column("NewStatus", "int", identityDeletionProcessAuditLogTable);
            identityDeletionProcessAuditLogTable.Columns.Add("NewStatus", newStatusColumn);
            var oldStatusColumn = new Column("OldStatus", "int", identityDeletionProcessAuditLogTable)
            {
                IsNullable = true
            };
            identityDeletionProcessAuditLogTable.Columns.Add("OldStatus", oldStatusColumn);
            var pK_IdentityDeletionProcessAuditLog = new UniqueConstraint("PK_IdentityDeletionProcessAuditLog", identityDeletionProcessAuditLogTable, new[] { idColumn4 });
            identityDeletionProcessAuditLogTable.PrimaryKey = pK_IdentityDeletionProcessAuditLog;
            var pK_IdentityDeletionProcessAuditLogUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry",
                new[] { "Id" });
            pK_IdentityDeletionProcessAuditLog.MappedKeys.Add(pK_IdentityDeletionProcessAuditLogUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IdentityDeletionProcessAuditLogUc).Add(pK_IdentityDeletionProcessAuditLog);
            identityDeletionProcessAuditLogTable.UniqueConstraints.Add("PK_IdentityDeletionProcessAuditLog", pK_IdentityDeletionProcessAuditLog);
            var iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId = new TableIndex(
            "IX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId", identityDeletionProcessAuditLogTable, new[] { identityDeletionProcessIdColumn }, false);
            var iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry",
                new[] { "IdentityDeletionProcessId" });
            iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId.MappedIndexes.Add(iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessIdIx).Add(iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId);
            identityDeletionProcessAuditLogTable.Indexes.Add("IX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId", iX_IdentityDeletionProcessAuditLog_IdentityDeletionProcessId);
            relationalModel.Tables.Add(("IdentityDeletionProcessAuditLog", null), identityDeletionProcessAuditLogTable);
            var identityDeletionProcessAuditLogTableMapping = new TableMapping(identityDeletionProcessAuditLogEntry, identityDeletionProcessAuditLogTable, true);
            identityDeletionProcessAuditLogTable.AddTypeMapping(identityDeletionProcessAuditLogTableMapping, false);
            tableMappings6.Add(identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, identityDeletionProcessAuditLogEntry.FindProperty("Id")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn3, identityDeletionProcessAuditLogEntry.FindProperty("CreatedAt")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(deviceIdHashColumn, identityDeletionProcessAuditLogEntry.FindProperty("DeviceIdHash")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(identityAddressHashColumn, identityDeletionProcessAuditLogEntry.FindProperty("IdentityAddressHash")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(identityDeletionProcessIdColumn, identityDeletionProcessAuditLogEntry.FindProperty("IdentityDeletionProcessId")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, identityDeletionProcessAuditLogEntry.FindProperty("Message")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(newStatusColumn, identityDeletionProcessAuditLogEntry.FindProperty("NewStatus")!, identityDeletionProcessAuditLogTableMapping);
            RelationalModel.CreateColumnMapping(oldStatusColumn, identityDeletionProcessAuditLogEntry.FindProperty("OldStatus")!, identityDeletionProcessAuditLogTableMapping);

            var customOpenIddictEntityFrameworkCoreApplication = FindEntityType("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            customOpenIddictEntityFrameworkCoreApplication.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase = new TableBase("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication", null, relationalModel);
            var clientIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ClientId", "nvarchar(100)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("ClientId", clientIdColumnBase0);
            var clientSecretColumnBase = new ColumnBase<ColumnMappingBase>("ClientSecret", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("ClientSecret", clientSecretColumnBase);
            var concurrencyTokenColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyToken", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("ConcurrencyToken", concurrencyTokenColumnBase);
            var consentTypeColumnBase = new ColumnBase<ColumnMappingBase>("ConsentType", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("ConsentType", consentTypeColumnBase);
            var createdAtColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("CreatedAt", createdAtColumnBase4);
            var defaultTierColumnBase = new ColumnBase<ColumnMappingBase>("DefaultTier", "char(20)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("DefaultTier", defaultTierColumnBase);
            var displayNameColumnBase = new ColumnBase<ColumnMappingBase>("DisplayName", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("DisplayName", displayNameColumnBase);
            var displayNamesColumnBase = new ColumnBase<ColumnMappingBase>("DisplayNames", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("DisplayNames", displayNamesColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("Id", idColumnBase5);
            var maxIdentitiesColumnBase = new ColumnBase<ColumnMappingBase>("MaxIdentities", "int", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("MaxIdentities", maxIdentitiesColumnBase);
            var permissionsColumnBase = new ColumnBase<ColumnMappingBase>("Permissions", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("Permissions", permissionsColumnBase);
            var postLogoutRedirectUrisColumnBase = new ColumnBase<ColumnMappingBase>("PostLogoutRedirectUris", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("PostLogoutRedirectUris", postLogoutRedirectUrisColumnBase);
            var propertiesColumnBase = new ColumnBase<ColumnMappingBase>("Properties", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("Properties", propertiesColumnBase);
            var redirectUrisColumnBase = new ColumnBase<ColumnMappingBase>("RedirectUris", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("RedirectUris", redirectUrisColumnBase);
            var requirementsColumnBase = new ColumnBase<ColumnMappingBase>("Requirements", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("Requirements", requirementsColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase = new TableMappingBase<ColumnMappingBase>(customOpenIddictEntityFrameworkCoreApplication, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase, true);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationTableBase.AddTypeMapping(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase, false);
            defaultTableMappings7.Add(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Id")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase0, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ClientId")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientSecretColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ClientSecret")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyTokenColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ConcurrencyToken")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consentTypeColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ConsentType")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase4, customOpenIddictEntityFrameworkCoreApplication.FindProperty("CreatedAt")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)defaultTierColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DefaultTier")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNameColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DisplayName")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNamesColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DisplayNames")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxIdentitiesColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("MaxIdentities")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)permissionsColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Permissions")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postLogoutRedirectUrisColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("PostLogoutRedirectUris")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Properties")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)redirectUrisColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("RedirectUris")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)requirementsColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Requirements")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Type")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreApplicationMappingBase);

            var tableMappings7 = new List<TableMapping>();
            customOpenIddictEntityFrameworkCoreApplication.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var openIddictApplicationsTable = new Table("OpenIddictApplications", null, relationalModel);
            var idColumn5 = new Column("Id", "nvarchar(450)", openIddictApplicationsTable);
            openIddictApplicationsTable.Columns.Add("Id", idColumn5);
            var clientIdColumn0 = new Column("ClientId", "nvarchar(100)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("ClientId", clientIdColumn0);
            var clientSecretColumn = new Column("ClientSecret", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("ClientSecret", clientSecretColumn);
            var concurrencyTokenColumn = new Column("ConcurrencyToken", "nvarchar(50)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("ConcurrencyToken", concurrencyTokenColumn);
            var consentTypeColumn = new Column("ConsentType", "nvarchar(50)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("ConsentType", consentTypeColumn);
            var createdAtColumn4 = new Column("CreatedAt", "datetime2", openIddictApplicationsTable);
            openIddictApplicationsTable.Columns.Add("CreatedAt", createdAtColumn4);
            var defaultTierColumn = new Column("DefaultTier", "char(20)", openIddictApplicationsTable);
            openIddictApplicationsTable.Columns.Add("DefaultTier", defaultTierColumn);
            var displayNameColumn = new Column("DisplayName", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("DisplayName", displayNameColumn);
            var displayNamesColumn = new Column("DisplayNames", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("DisplayNames", displayNamesColumn);
            var maxIdentitiesColumn = new Column("MaxIdentities", "int", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("MaxIdentities", maxIdentitiesColumn);
            var permissionsColumn = new Column("Permissions", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("Permissions", permissionsColumn);
            var postLogoutRedirectUrisColumn = new Column("PostLogoutRedirectUris", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("PostLogoutRedirectUris", postLogoutRedirectUrisColumn);
            var propertiesColumn = new Column("Properties", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("Properties", propertiesColumn);
            var redirectUrisColumn = new Column("RedirectUris", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("RedirectUris", redirectUrisColumn);
            var requirementsColumn = new Column("Requirements", "nvarchar(max)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("Requirements", requirementsColumn);
            var typeColumn = new Column("Type", "nvarchar(50)", openIddictApplicationsTable)
            {
                IsNullable = true
            };
            openIddictApplicationsTable.Columns.Add("Type", typeColumn);
            var pK_OpenIddictApplications = new UniqueConstraint("PK_OpenIddictApplications", openIddictApplicationsTable, new[] { idColumn5 });
            openIddictApplicationsTable.PrimaryKey = pK_OpenIddictApplications;
            var pK_OpenIddictApplicationsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "Id" });
            pK_OpenIddictApplications.MappedKeys.Add(pK_OpenIddictApplicationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OpenIddictApplicationsUc).Add(pK_OpenIddictApplications);
            openIddictApplicationsTable.UniqueConstraints.Add("PK_OpenIddictApplications", pK_OpenIddictApplications);
            var iX_OpenIddictApplications_ClientId = new TableIndex(
            "IX_OpenIddictApplications_ClientId", openIddictApplicationsTable, new[] { clientIdColumn0 }, true);
            var iX_OpenIddictApplications_ClientIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "ClientId" });
            iX_OpenIddictApplications_ClientId.MappedIndexes.Add(iX_OpenIddictApplications_ClientIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictApplications_ClientIdIx).Add(iX_OpenIddictApplications_ClientId);
            openIddictApplicationsTable.Indexes.Add("IX_OpenIddictApplications_ClientId", iX_OpenIddictApplications_ClientId);
            var iX_OpenIddictApplications_DefaultTier = new TableIndex(
            "IX_OpenIddictApplications_DefaultTier", openIddictApplicationsTable, new[] { defaultTierColumn }, false);
            var iX_OpenIddictApplications_DefaultTierIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "DefaultTier" });
            iX_OpenIddictApplications_DefaultTier.MappedIndexes.Add(iX_OpenIddictApplications_DefaultTierIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictApplications_DefaultTierIx).Add(iX_OpenIddictApplications_DefaultTier);
            openIddictApplicationsTable.Indexes.Add("IX_OpenIddictApplications_DefaultTier", iX_OpenIddictApplications_DefaultTier);
            relationalModel.Tables.Add(("OpenIddictApplications", null), openIddictApplicationsTable);
            var openIddictApplicationsTableMapping = new TableMapping(customOpenIddictEntityFrameworkCoreApplication, openIddictApplicationsTable, true);
            openIddictApplicationsTable.AddTypeMapping(openIddictApplicationsTableMapping, false);
            tableMappings7.Add(openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Id")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn0, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ClientId")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(clientSecretColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ClientSecret")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyTokenColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ConcurrencyToken")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(consentTypeColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("ConsentType")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn4, customOpenIddictEntityFrameworkCoreApplication.FindProperty("CreatedAt")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(defaultTierColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DefaultTier")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(displayNameColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DisplayName")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(displayNamesColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("DisplayNames")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(maxIdentitiesColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("MaxIdentities")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(permissionsColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Permissions")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(postLogoutRedirectUrisColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("PostLogoutRedirectUris")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Properties")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(redirectUrisColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("RedirectUris")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(requirementsColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Requirements")!, openIddictApplicationsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, customOpenIddictEntityFrameworkCoreApplication.FindProperty("Type")!, openIddictApplicationsTableMapping);

            var customOpenIddictEntityFrameworkCoreAuthorization = FindEntityType("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            customOpenIddictEntityFrameworkCoreAuthorization.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase = new TableBase("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization", null, relationalModel);
            var applicationIdColumnBase = new ColumnBase<ColumnMappingBase>("ApplicationId", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("ApplicationId", applicationIdColumnBase);
            var concurrencyTokenColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyToken", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("ConcurrencyToken", concurrencyTokenColumnBase0);
            var creationDateColumnBase = new ColumnBase<ColumnMappingBase>("CreationDate", "datetime2", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("CreationDate", creationDateColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Id", idColumnBase6);
            var propertiesColumnBase0 = new ColumnBase<ColumnMappingBase>("Properties", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Properties", propertiesColumnBase0);
            var scopesColumnBase = new ColumnBase<ColumnMappingBase>("Scopes", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Scopes", scopesColumnBase);
            var statusColumnBase1 = new ColumnBase<ColumnMappingBase>("Status", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Status", statusColumnBase1);
            var subjectColumnBase = new ColumnBase<ColumnMappingBase>("Subject", "nvarchar(400)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Subject", subjectColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.Columns.Add("Type", typeColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase = new TableMappingBase<ColumnMappingBase>(customOpenIddictEntityFrameworkCoreAuthorization, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase, true);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationTableBase.AddTypeMapping(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase, false);
            defaultTableMappings8.Add(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Id")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)applicationIdColumnBase, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("ApplicationId")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyTokenColumnBase0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("ConcurrencyToken")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("CreationDate")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Properties")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)scopesColumnBase, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Scopes")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase1, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Status")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subjectColumnBase, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Subject")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Type")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreAuthorizationMappingBase);

            var tableMappings8 = new List<TableMapping>();
            customOpenIddictEntityFrameworkCoreAuthorization.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var openIddictAuthorizationsTable = new Table("OpenIddictAuthorizations", null, relationalModel);
            var idColumn6 = new Column("Id", "nvarchar(450)", openIddictAuthorizationsTable);
            openIddictAuthorizationsTable.Columns.Add("Id", idColumn6);
            var applicationIdColumn = new Column("ApplicationId", "nvarchar(450)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("ApplicationId", applicationIdColumn);
            var concurrencyTokenColumn0 = new Column("ConcurrencyToken", "nvarchar(50)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("ConcurrencyToken", concurrencyTokenColumn0);
            var creationDateColumn = new Column("CreationDate", "datetime2", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("CreationDate", creationDateColumn);
            var propertiesColumn0 = new Column("Properties", "nvarchar(max)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("Properties", propertiesColumn0);
            var scopesColumn = new Column("Scopes", "nvarchar(max)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("Scopes", scopesColumn);
            var statusColumn1 = new Column("Status", "nvarchar(50)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("Status", statusColumn1);
            var subjectColumn = new Column("Subject", "nvarchar(400)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("Subject", subjectColumn);
            var typeColumn0 = new Column("Type", "nvarchar(50)", openIddictAuthorizationsTable)
            {
                IsNullable = true
            };
            openIddictAuthorizationsTable.Columns.Add("Type", typeColumn0);
            var pK_OpenIddictAuthorizations = new UniqueConstraint("PK_OpenIddictAuthorizations", openIddictAuthorizationsTable, new[] { idColumn6 });
            openIddictAuthorizationsTable.PrimaryKey = pK_OpenIddictAuthorizations;
            var pK_OpenIddictAuthorizationsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization",
                new[] { "Id" });
            pK_OpenIddictAuthorizations.MappedKeys.Add(pK_OpenIddictAuthorizationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OpenIddictAuthorizationsUc).Add(pK_OpenIddictAuthorizations);
            openIddictAuthorizationsTable.UniqueConstraints.Add("PK_OpenIddictAuthorizations", pK_OpenIddictAuthorizations);
            var iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type = new TableIndex(
            "IX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type", openIddictAuthorizationsTable, new[] { applicationIdColumn, statusColumn1, subjectColumn, typeColumn0 }, false);
            var iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_TypeIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization",
                new[] { "ApplicationId", "Status", "Subject", "Type" });
            iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type.MappedIndexes.Add(iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_TypeIx).Add(iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type);
            openIddictAuthorizationsTable.Indexes.Add("IX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type", iX_OpenIddictAuthorizations_ApplicationId_Status_Subject_Type);
            relationalModel.Tables.Add(("OpenIddictAuthorizations", null), openIddictAuthorizationsTable);
            var openIddictAuthorizationsTableMapping = new TableMapping(customOpenIddictEntityFrameworkCoreAuthorization, openIddictAuthorizationsTable, true);
            openIddictAuthorizationsTable.AddTypeMapping(openIddictAuthorizationsTableMapping, false);
            tableMappings8.Add(openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Id")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(applicationIdColumn, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("ApplicationId")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyTokenColumn0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("ConcurrencyToken")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("CreationDate")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Properties")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(scopesColumn, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Scopes")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn1, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Status")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(subjectColumn, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Subject")!, openIddictAuthorizationsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, customOpenIddictEntityFrameworkCoreAuthorization.FindProperty("Type")!, openIddictAuthorizationsTableMapping);

            var customOpenIddictEntityFrameworkCoreScope = FindEntityType("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreScope")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            customOpenIddictEntityFrameworkCoreScope.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase = new TableBase("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreScope", null, relationalModel);
            var concurrencyTokenColumnBase1 = new ColumnBase<ColumnMappingBase>("ConcurrencyToken", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("ConcurrencyToken", concurrencyTokenColumnBase1);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Description", descriptionColumnBase);
            var descriptionsColumnBase = new ColumnBase<ColumnMappingBase>("Descriptions", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Descriptions", descriptionsColumnBase);
            var displayNameColumnBase0 = new ColumnBase<ColumnMappingBase>("DisplayName", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("DisplayName", displayNameColumnBase0);
            var displayNamesColumnBase0 = new ColumnBase<ColumnMappingBase>("DisplayNames", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("DisplayNames", displayNamesColumnBase0);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Id", idColumnBase7);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(200)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Name", nameColumnBase0);
            var propertiesColumnBase1 = new ColumnBase<ColumnMappingBase>("Properties", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Properties", propertiesColumnBase1);
            var resourcesColumnBase = new ColumnBase<ColumnMappingBase>("Resources", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.Columns.Add("Resources", resourcesColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreScope", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase = new TableMappingBase<ColumnMappingBase>(customOpenIddictEntityFrameworkCoreScope, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase, true);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeTableBase.AddTypeMapping(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase, false);
            defaultTableMappings9.Add(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, customOpenIddictEntityFrameworkCoreScope.FindProperty("Id")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyTokenColumnBase1, customOpenIddictEntityFrameworkCoreScope.FindProperty("ConcurrencyToken")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, customOpenIddictEntityFrameworkCoreScope.FindProperty("Description")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionsColumnBase, customOpenIddictEntityFrameworkCoreScope.FindProperty("Descriptions")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNameColumnBase0, customOpenIddictEntityFrameworkCoreScope.FindProperty("DisplayName")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNamesColumnBase0, customOpenIddictEntityFrameworkCoreScope.FindProperty("DisplayNames")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, customOpenIddictEntityFrameworkCoreScope.FindProperty("Name")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase1, customOpenIddictEntityFrameworkCoreScope.FindProperty("Properties")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)resourcesColumnBase, customOpenIddictEntityFrameworkCoreScope.FindProperty("Resources")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreScopeMappingBase);

            var tableMappings9 = new List<TableMapping>();
            customOpenIddictEntityFrameworkCoreScope.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var openIddictScopesTable = new Table("OpenIddictScopes", null, relationalModel);
            var idColumn7 = new Column("Id", "nvarchar(450)", openIddictScopesTable);
            openIddictScopesTable.Columns.Add("Id", idColumn7);
            var concurrencyTokenColumn1 = new Column("ConcurrencyToken", "nvarchar(50)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("ConcurrencyToken", concurrencyTokenColumn1);
            var descriptionColumn = new Column("Description", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("Description", descriptionColumn);
            var descriptionsColumn = new Column("Descriptions", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("Descriptions", descriptionsColumn);
            var displayNameColumn0 = new Column("DisplayName", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("DisplayName", displayNameColumn0);
            var displayNamesColumn0 = new Column("DisplayNames", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("DisplayNames", displayNamesColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(200)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("Name", nameColumn0);
            var propertiesColumn1 = new Column("Properties", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("Properties", propertiesColumn1);
            var resourcesColumn = new Column("Resources", "nvarchar(max)", openIddictScopesTable)
            {
                IsNullable = true
            };
            openIddictScopesTable.Columns.Add("Resources", resourcesColumn);
            var pK_OpenIddictScopes = new UniqueConstraint("PK_OpenIddictScopes", openIddictScopesTable, new[] { idColumn7 });
            openIddictScopesTable.PrimaryKey = pK_OpenIddictScopes;
            var pK_OpenIddictScopesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreScope",
                new[] { "Id" });
            pK_OpenIddictScopes.MappedKeys.Add(pK_OpenIddictScopesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OpenIddictScopesUc).Add(pK_OpenIddictScopes);
            openIddictScopesTable.UniqueConstraints.Add("PK_OpenIddictScopes", pK_OpenIddictScopes);
            var iX_OpenIddictScopes_Name = new TableIndex(
            "IX_OpenIddictScopes_Name", openIddictScopesTable, new[] { nameColumn0 }, true);
            var iX_OpenIddictScopes_NameIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreScope",
                new[] { "Name" });
            iX_OpenIddictScopes_Name.MappedIndexes.Add(iX_OpenIddictScopes_NameIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictScopes_NameIx).Add(iX_OpenIddictScopes_Name);
            openIddictScopesTable.Indexes.Add("IX_OpenIddictScopes_Name", iX_OpenIddictScopes_Name);
            relationalModel.Tables.Add(("OpenIddictScopes", null), openIddictScopesTable);
            var openIddictScopesTableMapping = new TableMapping(customOpenIddictEntityFrameworkCoreScope, openIddictScopesTable, true);
            openIddictScopesTable.AddTypeMapping(openIddictScopesTableMapping, false);
            tableMappings9.Add(openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, customOpenIddictEntityFrameworkCoreScope.FindProperty("Id")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyTokenColumn1, customOpenIddictEntityFrameworkCoreScope.FindProperty("ConcurrencyToken")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, customOpenIddictEntityFrameworkCoreScope.FindProperty("Description")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionsColumn, customOpenIddictEntityFrameworkCoreScope.FindProperty("Descriptions")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(displayNameColumn0, customOpenIddictEntityFrameworkCoreScope.FindProperty("DisplayName")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(displayNamesColumn0, customOpenIddictEntityFrameworkCoreScope.FindProperty("DisplayNames")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, customOpenIddictEntityFrameworkCoreScope.FindProperty("Name")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn1, customOpenIddictEntityFrameworkCoreScope.FindProperty("Properties")!, openIddictScopesTableMapping);
            RelationalModel.CreateColumnMapping(resourcesColumn, customOpenIddictEntityFrameworkCoreScope.FindProperty("Resources")!, openIddictScopesTableMapping);

            var customOpenIddictEntityFrameworkCoreToken = FindEntityType("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            customOpenIddictEntityFrameworkCoreToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase = new TableBase("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken", null, relationalModel);
            var applicationIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ApplicationId", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("ApplicationId", applicationIdColumnBase0);
            var authorizationIdColumnBase = new ColumnBase<ColumnMappingBase>("AuthorizationId", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("AuthorizationId", authorizationIdColumnBase);
            var concurrencyTokenColumnBase2 = new ColumnBase<ColumnMappingBase>("ConcurrencyToken", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("ConcurrencyToken", concurrencyTokenColumnBase2);
            var creationDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreationDate", "datetime2", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("CreationDate", creationDateColumnBase0);
            var expirationDateColumnBase = new ColumnBase<ColumnMappingBase>("ExpirationDate", "datetime2", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("ExpirationDate", expirationDateColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Id", idColumnBase8);
            var payloadColumnBase = new ColumnBase<ColumnMappingBase>("Payload", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Payload", payloadColumnBase);
            var propertiesColumnBase2 = new ColumnBase<ColumnMappingBase>("Properties", "nvarchar(max)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Properties", propertiesColumnBase2);
            var redemptionDateColumnBase = new ColumnBase<ColumnMappingBase>("RedemptionDate", "datetime2", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("RedemptionDate", redemptionDateColumnBase);
            var referenceIdColumnBase = new ColumnBase<ColumnMappingBase>("ReferenceId", "nvarchar(100)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("ReferenceId", referenceIdColumnBase);
            var statusColumnBase2 = new ColumnBase<ColumnMappingBase>("Status", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Status", statusColumnBase2);
            var subjectColumnBase0 = new ColumnBase<ColumnMappingBase>("Subject", "nvarchar(400)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Subject", subjectColumnBase0);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("Type", "nvarchar(50)", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase)
            {
                IsNullable = true
            };
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.Columns.Add("Type", typeColumnBase1);
            relationalModel.DefaultTables.Add("Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken", backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase);
            var backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase = new TableMappingBase<ColumnMappingBase>(customOpenIddictEntityFrameworkCoreToken, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase, true);
            backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenTableBase.AddTypeMapping(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase, false);
            defaultTableMappings10.Add(backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, customOpenIddictEntityFrameworkCoreToken.FindProperty("Id")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)applicationIdColumnBase0, customOpenIddictEntityFrameworkCoreToken.FindProperty("ApplicationId")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorizationIdColumnBase, customOpenIddictEntityFrameworkCoreToken.FindProperty("AuthorizationId")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyTokenColumnBase2, customOpenIddictEntityFrameworkCoreToken.FindProperty("ConcurrencyToken")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationDateColumnBase0, customOpenIddictEntityFrameworkCoreToken.FindProperty("CreationDate")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expirationDateColumnBase, customOpenIddictEntityFrameworkCoreToken.FindProperty("ExpirationDate")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payloadColumnBase, customOpenIddictEntityFrameworkCoreToken.FindProperty("Payload")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)propertiesColumnBase2, customOpenIddictEntityFrameworkCoreToken.FindProperty("Properties")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)redemptionDateColumnBase, customOpenIddictEntityFrameworkCoreToken.FindProperty("RedemptionDate")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)referenceIdColumnBase, customOpenIddictEntityFrameworkCoreToken.FindProperty("ReferenceId")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase2, customOpenIddictEntityFrameworkCoreToken.FindProperty("Status")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subjectColumnBase0, customOpenIddictEntityFrameworkCoreToken.FindProperty("Subject")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, customOpenIddictEntityFrameworkCoreToken.FindProperty("Type")!, backboneModulesDevicesInfrastructureOpenIddictCustomOpenIddictEntityFrameworkCoreTokenMappingBase);

            var tableMappings10 = new List<TableMapping>();
            customOpenIddictEntityFrameworkCoreToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var openIddictTokensTable = new Table("OpenIddictTokens", null, relationalModel);
            var idColumn8 = new Column("Id", "nvarchar(450)", openIddictTokensTable);
            openIddictTokensTable.Columns.Add("Id", idColumn8);
            var applicationIdColumn0 = new Column("ApplicationId", "nvarchar(450)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("ApplicationId", applicationIdColumn0);
            var authorizationIdColumn = new Column("AuthorizationId", "nvarchar(450)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("AuthorizationId", authorizationIdColumn);
            var concurrencyTokenColumn2 = new Column("ConcurrencyToken", "nvarchar(50)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("ConcurrencyToken", concurrencyTokenColumn2);
            var creationDateColumn0 = new Column("CreationDate", "datetime2", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("CreationDate", creationDateColumn0);
            var expirationDateColumn = new Column("ExpirationDate", "datetime2", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("ExpirationDate", expirationDateColumn);
            var payloadColumn = new Column("Payload", "nvarchar(max)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("Payload", payloadColumn);
            var propertiesColumn2 = new Column("Properties", "nvarchar(max)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("Properties", propertiesColumn2);
            var redemptionDateColumn = new Column("RedemptionDate", "datetime2", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("RedemptionDate", redemptionDateColumn);
            var referenceIdColumn = new Column("ReferenceId", "nvarchar(100)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("ReferenceId", referenceIdColumn);
            var statusColumn2 = new Column("Status", "nvarchar(50)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("Status", statusColumn2);
            var subjectColumn0 = new Column("Subject", "nvarchar(400)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("Subject", subjectColumn0);
            var typeColumn1 = new Column("Type", "nvarchar(50)", openIddictTokensTable)
            {
                IsNullable = true
            };
            openIddictTokensTable.Columns.Add("Type", typeColumn1);
            var pK_OpenIddictTokens = new UniqueConstraint("PK_OpenIddictTokens", openIddictTokensTable, new[] { idColumn8 });
            openIddictTokensTable.PrimaryKey = pK_OpenIddictTokens;
            var pK_OpenIddictTokensUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "Id" });
            pK_OpenIddictTokens.MappedKeys.Add(pK_OpenIddictTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OpenIddictTokensUc).Add(pK_OpenIddictTokens);
            openIddictTokensTable.UniqueConstraints.Add("PK_OpenIddictTokens", pK_OpenIddictTokens);
            var iX_OpenIddictTokens_ApplicationId_Status_Subject_Type = new TableIndex(
            "IX_OpenIddictTokens_ApplicationId_Status_Subject_Type", openIddictTokensTable, new[] { applicationIdColumn0, statusColumn2, subjectColumn0, typeColumn1 }, false);
            var iX_OpenIddictTokens_ApplicationId_Status_Subject_TypeIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "ApplicationId", "Status", "Subject", "Type" });
            iX_OpenIddictTokens_ApplicationId_Status_Subject_Type.MappedIndexes.Add(iX_OpenIddictTokens_ApplicationId_Status_Subject_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictTokens_ApplicationId_Status_Subject_TypeIx).Add(iX_OpenIddictTokens_ApplicationId_Status_Subject_Type);
            openIddictTokensTable.Indexes.Add("IX_OpenIddictTokens_ApplicationId_Status_Subject_Type", iX_OpenIddictTokens_ApplicationId_Status_Subject_Type);
            var iX_OpenIddictTokens_AuthorizationId = new TableIndex(
            "IX_OpenIddictTokens_AuthorizationId", openIddictTokensTable, new[] { authorizationIdColumn }, false);
            var iX_OpenIddictTokens_AuthorizationIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "AuthorizationId" });
            iX_OpenIddictTokens_AuthorizationId.MappedIndexes.Add(iX_OpenIddictTokens_AuthorizationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictTokens_AuthorizationIdIx).Add(iX_OpenIddictTokens_AuthorizationId);
            openIddictTokensTable.Indexes.Add("IX_OpenIddictTokens_AuthorizationId", iX_OpenIddictTokens_AuthorizationId);
            var iX_OpenIddictTokens_ReferenceId = new TableIndex(
            "IX_OpenIddictTokens_ReferenceId", openIddictTokensTable, new[] { referenceIdColumn }, true);
            var iX_OpenIddictTokens_ReferenceIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "ReferenceId" });
            iX_OpenIddictTokens_ReferenceId.MappedIndexes.Add(iX_OpenIddictTokens_ReferenceIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OpenIddictTokens_ReferenceIdIx).Add(iX_OpenIddictTokens_ReferenceId);
            openIddictTokensTable.Indexes.Add("IX_OpenIddictTokens_ReferenceId", iX_OpenIddictTokens_ReferenceId);
            relationalModel.Tables.Add(("OpenIddictTokens", null), openIddictTokensTable);
            var openIddictTokensTableMapping = new TableMapping(customOpenIddictEntityFrameworkCoreToken, openIddictTokensTable, true);
            openIddictTokensTable.AddTypeMapping(openIddictTokensTableMapping, false);
            tableMappings10.Add(openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, customOpenIddictEntityFrameworkCoreToken.FindProperty("Id")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(applicationIdColumn0, customOpenIddictEntityFrameworkCoreToken.FindProperty("ApplicationId")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(authorizationIdColumn, customOpenIddictEntityFrameworkCoreToken.FindProperty("AuthorizationId")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyTokenColumn2, customOpenIddictEntityFrameworkCoreToken.FindProperty("ConcurrencyToken")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(creationDateColumn0, customOpenIddictEntityFrameworkCoreToken.FindProperty("CreationDate")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(expirationDateColumn, customOpenIddictEntityFrameworkCoreToken.FindProperty("ExpirationDate")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(payloadColumn, customOpenIddictEntityFrameworkCoreToken.FindProperty("Payload")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(propertiesColumn2, customOpenIddictEntityFrameworkCoreToken.FindProperty("Properties")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(redemptionDateColumn, customOpenIddictEntityFrameworkCoreToken.FindProperty("RedemptionDate")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(referenceIdColumn, customOpenIddictEntityFrameworkCoreToken.FindProperty("ReferenceId")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn2, customOpenIddictEntityFrameworkCoreToken.FindProperty("Status")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(subjectColumn0, customOpenIddictEntityFrameworkCoreToken.FindProperty("Subject")!, openIddictTokensTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, customOpenIddictEntityFrameworkCoreToken.FindProperty("Type")!, openIddictTokensTableMapping);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Id", idColumnBase9);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Name", nameColumnBase1);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings11.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings11 = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn9 = new Column("Id", "nvarchar(450)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn9);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var nameColumn1 = new Column("Name", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn1);
            var normalizedNameColumn = new Column("NormalizedName", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn9 });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings11.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase10);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings12.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings12 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn10 = new Column("Id", "int", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn10);
            var claimTypeColumn = new Column("ClaimType", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "nvarchar(450)", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn10 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings12.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase11);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings13.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings13 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn11 = new Column("Id", "int", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn11);
            var claimTypeColumn0 = new Column("ClaimType", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "nvarchar(450)", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn11 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings13.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings14.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings14 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "nvarchar(max)", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings14.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings15.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings15 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn1 = new Column("UserId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn1);
            var roleIdColumn0 = new Column("RoleId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn1, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings15.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase2);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings16.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings16 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn2 = new Column("UserId", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn2);
            var loginProviderColumn0 = new Column("LoginProvider", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn2 = new Column("Name", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn2);
            var valueColumn = new Column("Value", "nvarchar(max)", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn2, loginProviderColumn0, nameColumn2 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings16.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUsers_Devices_DeviceId = new ForeignKeyConstraint(
                "FK_AspNetUsers_Devices_DeviceId", aspNetUsersTable, devicesTable,
                new[] { deviceIdColumn0 },
                devicesTable.FindUniqueConstraint("PK_Devices")!, ReferentialAction.Cascade);
            var fK_AspNetUsers_Devices_DeviceIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "DeviceId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.Device",
                new[] { "Id" });
            fK_AspNetUsers_Devices_DeviceId.MappedForeignKeys.Add(fK_AspNetUsers_Devices_DeviceIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUsers_Devices_DeviceIdFk).Add(fK_AspNetUsers_Devices_DeviceId);
            aspNetUsersTable.ForeignKeyConstraints.Add(fK_AspNetUsers_Devices_DeviceId);
            devicesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUsers_Devices_DeviceId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_Devices_Identities_IdentityAddress = new ForeignKeyConstraint(
                "FK_Devices_Identities_IdentityAddress", devicesTable, identitiesTable,
                new[] { identityAddressColumn0 },
                identitiesTable.FindUniqueConstraint("PK_Identities")!, ReferentialAction.Cascade);
            var fK_Devices_Identities_IdentityAddressFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.Device",
                new[] { "IdentityAddress" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.Identity",
                new[] { "Address" });
            fK_Devices_Identities_IdentityAddress.MappedForeignKeys.Add(fK_Devices_Identities_IdentityAddressFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Devices_Identities_IdentityAddressFk).Add(fK_Devices_Identities_IdentityAddress);
            devicesTable.ForeignKeyConstraints.Add(fK_Devices_Identities_IdentityAddress);
            identitiesTable.ReferencingForeignKeyConstraints.Add(fK_Devices_Identities_IdentityAddress);
            var fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId = new ForeignKeyConstraint(
                "FK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId", identityDeletionProcessAuditLogTable, identityDeletionProcessesTable,
                new[] { identityDeletionProcessIdColumn },
                identityDeletionProcessesTable.FindUniqueConstraint("PK_IdentityDeletionProcesses")!, ReferentialAction.NoAction);
            var fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry",
                new[] { "IdentityDeletionProcessId" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess",
                new[] { "Id" });
            fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId.MappedForeignKeys.Add(fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessIdFk).Add(fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId);
            identityDeletionProcessAuditLogTable.ForeignKeyConstraints.Add(fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId);
            identityDeletionProcessesTable.ReferencingForeignKeyConstraints.Add(fK_IdentityDeletionProcessAuditLog_IdentityDeletionProcesses_IdentityDeletionProcessId);
            var fK_IdentityDeletionProcesses_Identities_IdentityAddress = new ForeignKeyConstraint(
                "FK_IdentityDeletionProcesses_Identities_IdentityAddress", identityDeletionProcessesTable, identitiesTable,
                new[] { identityAddressColumn1 },
                identitiesTable.FindUniqueConstraint("PK_Identities")!, ReferentialAction.NoAction);
            var fK_IdentityDeletionProcesses_Identities_IdentityAddressFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcess",
                new[] { "IdentityAddress" },
                "Backbone.Modules.Devices.Domain.Entities.Identities.Identity",
                new[] { "Address" });
            fK_IdentityDeletionProcesses_Identities_IdentityAddress.MappedForeignKeys.Add(fK_IdentityDeletionProcesses_Identities_IdentityAddressFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_IdentityDeletionProcesses_Identities_IdentityAddressFk).Add(fK_IdentityDeletionProcesses_Identities_IdentityAddress);
            identityDeletionProcessesTable.ForeignKeyConstraints.Add(fK_IdentityDeletionProcesses_Identities_IdentityAddress);
            identitiesTable.ReferencingForeignKeyConstraints.Add(fK_IdentityDeletionProcesses_Identities_IdentityAddress);
            var fK_OpenIddictApplications_Tiers_DefaultTier = new ForeignKeyConstraint(
                "FK_OpenIddictApplications_Tiers_DefaultTier", openIddictApplicationsTable, tiersTable,
                new[] { defaultTierColumn },
                tiersTable.FindUniqueConstraint("PK_Tiers")!, ReferentialAction.Restrict);
            var fK_OpenIddictApplications_Tiers_DefaultTierFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "DefaultTier" },
                "Backbone.Modules.Devices.Domain.Aggregates.Tier.Tier",
                new[] { "Id" });
            fK_OpenIddictApplications_Tiers_DefaultTier.MappedForeignKeys.Add(fK_OpenIddictApplications_Tiers_DefaultTierFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OpenIddictApplications_Tiers_DefaultTierFk).Add(fK_OpenIddictApplications_Tiers_DefaultTier);
            openIddictApplicationsTable.ForeignKeyConstraints.Add(fK_OpenIddictApplications_Tiers_DefaultTier);
            tiersTable.ReferencingForeignKeyConstraints.Add(fK_OpenIddictApplications_Tiers_DefaultTier);
            var fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId = new ForeignKeyConstraint(
                "FK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId", openIddictAuthorizationsTable, openIddictApplicationsTable,
                new[] { applicationIdColumn },
                openIddictApplicationsTable.FindUniqueConstraint("PK_OpenIddictApplications")!, ReferentialAction.NoAction);
            var fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization",
                new[] { "ApplicationId" },
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "Id" });
            fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId.MappedForeignKeys.Add(fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationIdFk).Add(fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId);
            openIddictAuthorizationsTable.ForeignKeyConstraints.Add(fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId);
            openIddictApplicationsTable.ReferencingForeignKeyConstraints.Add(fK_OpenIddictAuthorizations_OpenIddictApplications_ApplicationId);
            var fK_OpenIddictTokens_OpenIddictApplications_ApplicationId = new ForeignKeyConstraint(
                "FK_OpenIddictTokens_OpenIddictApplications_ApplicationId", openIddictTokensTable, openIddictApplicationsTable,
                new[] { applicationIdColumn0 },
                openIddictApplicationsTable.FindUniqueConstraint("PK_OpenIddictApplications")!, ReferentialAction.NoAction);
            var fK_OpenIddictTokens_OpenIddictApplications_ApplicationIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "ApplicationId" },
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreApplication",
                new[] { "Id" });
            fK_OpenIddictTokens_OpenIddictApplications_ApplicationId.MappedForeignKeys.Add(fK_OpenIddictTokens_OpenIddictApplications_ApplicationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OpenIddictTokens_OpenIddictApplications_ApplicationIdFk).Add(fK_OpenIddictTokens_OpenIddictApplications_ApplicationId);
            openIddictTokensTable.ForeignKeyConstraints.Add(fK_OpenIddictTokens_OpenIddictApplications_ApplicationId);
            openIddictApplicationsTable.ReferencingForeignKeyConstraints.Add(fK_OpenIddictTokens_OpenIddictApplications_ApplicationId);
            var fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId = new ForeignKeyConstraint(
                "FK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId", openIddictTokensTable, openIddictAuthorizationsTable,
                new[] { authorizationIdColumn },
                openIddictAuthorizationsTable.FindUniqueConstraint("PK_OpenIddictAuthorizations")!, ReferentialAction.NoAction);
            var fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreToken",
                new[] { "AuthorizationId" },
                "Backbone.Modules.Devices.Infrastructure.OpenIddict.CustomOpenIddictEntityFrameworkCoreAuthorization",
                new[] { "Id" });
            fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId.MappedForeignKeys.Add(fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationIdFk).Add(fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId);
            openIddictTokensTable.ForeignKeyConstraints.Add(fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId);
            openIddictAuthorizationsTable.ReferencingForeignKeyConstraints.Add(fK_OpenIddictTokens_OpenIddictAuthorizations_AuthorizationId);
            return relationalModel.MakeReadOnly();
        }
    }
}
