// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Backbone.Modules.Synchronization.Domain.Entities.Sync;
using Backbone.Modules.Synchronization.Infrastructure.Persistence.Database.ValueConverters;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Backbone.Modules.Synchronization.Infrastructure.CompiledModels.SqlServer
{
    internal partial class SyncErrorEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                typeof(SyncError),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(SyncErrorId),
                propertyInfo: typeof(SyncError).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SyncError).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                maxLength: 20,
                unicode: false,
                valueConverter: new SyncErrorIdEntityFrameworkValueConverter());
            id.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<SyncErrorId>(
                    (SyncErrorId v1, SyncErrorId v2) => object.Equals(v1, v2),
                    (SyncErrorId v) => v.GetHashCode(),
                    (SyncErrorId v) => v),
                keyComparer: new ValueComparer<SyncErrorId>(
                    (SyncErrorId v1, SyncErrorId v2) => object.Equals(v1, v2),
                    (SyncErrorId v) => v.GetHashCode(),
                    (SyncErrorId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "char(20)",
                    size: 20,
                    dbType: System.Data.DbType.AnsiStringFixedLength),
                converter: new ValueConverter<SyncErrorId, string>(
                    (SyncErrorId id) => id == null ? null : id.StringValue,
                    (string value) => SyncErrorId.Parse(value)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<SyncErrorId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<SyncErrorId, string>(
                        (SyncErrorId id) => id == null ? null : id.StringValue,
                        (string value) => SyncErrorId.Parse(value))));
            id.AddAnnotation("Relational:IsFixedLength", true);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var errorCode = runtimeEntityType.AddProperty(
                "ErrorCode",
                typeof(string),
                propertyInfo: typeof(SyncError).GetProperty("ErrorCode", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SyncError).GetField("<ErrorCode>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 50);
            errorCode.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(50)",
                    size: 50,
                    dbType: System.Data.DbType.String));
            errorCode.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var externalEventId = runtimeEntityType.AddProperty(
                "ExternalEventId",
                typeof(ExternalEventId),
                propertyInfo: typeof(SyncError).GetProperty("ExternalEventId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SyncError).GetField("<ExternalEventId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false,
                valueConverter: new ExternalEventIdEntityFrameworkValueConverter());
            externalEventId.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<ExternalEventId>(
                    (ExternalEventId v1, ExternalEventId v2) => object.Equals(v1, v2),
                    (ExternalEventId v) => v.GetHashCode(),
                    (ExternalEventId v) => v),
                keyComparer: new ValueComparer<ExternalEventId>(
                    (ExternalEventId v1, ExternalEventId v2) => object.Equals(v1, v2),
                    (ExternalEventId v) => v.GetHashCode(),
                    (ExternalEventId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "char(20)",
                    size: 20,
                    dbType: System.Data.DbType.AnsiStringFixedLength),
                converter: new ValueConverter<ExternalEventId, string>(
                    (ExternalEventId id) => id == null ? null : id.StringValue,
                    (string value) => ExternalEventId.Parse(value)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ExternalEventId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<ExternalEventId, string>(
                        (ExternalEventId id) => id == null ? null : id.StringValue,
                        (string value) => ExternalEventId.Parse(value))));
            externalEventId.AddAnnotation("Relational:IsFixedLength", true);
            externalEventId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var syncRunId = runtimeEntityType.AddProperty(
                "SyncRunId",
                typeof(SyncRunId),
                propertyInfo: typeof(SyncError).GetProperty("SyncRunId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SyncError).GetField("<SyncRunId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                maxLength: 20,
                unicode: false,
                valueConverter: new SyncRunIdEntityFrameworkValueConverter());
            syncRunId.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<SyncRunId>(
                    (SyncRunId v1, SyncRunId v2) => object.Equals(v1, v2),
                    (SyncRunId v) => v.GetHashCode(),
                    (SyncRunId v) => v),
                keyComparer: new ValueComparer<SyncRunId>(
                    (SyncRunId v1, SyncRunId v2) => object.Equals(v1, v2),
                    (SyncRunId v) => v.GetHashCode(),
                    (SyncRunId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "char(20)",
                    size: 20,
                    dbType: System.Data.DbType.AnsiStringFixedLength),
                converter: new ValueConverter<SyncRunId, string>(
                    (SyncRunId id) => id == null ? null : id.StringValue,
                    (string value) => SyncRunId.Parse(value)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<SyncRunId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<SyncRunId, string>(
                        (SyncRunId id) => id == null ? null : id.StringValue,
                        (string value) => SyncRunId.Parse(value))));
            syncRunId.AddAnnotation("Relational:IsFixedLength", true);
            syncRunId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { externalEventId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { syncRunId, externalEventId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ExternalEventId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var errors = principalEntityType.AddNavigation("Errors",
                runtimeForeignKey,
                onDependent: false,
                typeof(IReadOnlyCollection<SyncError>),
                propertyInfo: typeof(ExternalEvent).GetProperty("Errors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExternalEvent).GetField("_errors", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SyncRunId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var errors = principalEntityType.AddNavigation("Errors",
                runtimeForeignKey,
                onDependent: false,
                typeof(IReadOnlyList<SyncError>),
                propertyInfo: typeof(SyncRun).GetProperty("Errors", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SyncRun).GetField("_errors", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "SyncErrors");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
