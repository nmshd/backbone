// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Backbone.Modules.Synchronization.Infrastructure.CompiledModels.SqlServer
{
    public partial class SynchronizationDbContextModel
    {
        partial void Initialize()
        {
            var datawallet = DatawalletEntityType.Create(this);
            var datawalletModification = DatawalletModificationEntityType.Create(this);
            var externalEvent = ExternalEventEntityType.Create(this);
            var syncError = SyncErrorEntityType.Create(this);
            var syncRun = SyncRunEntityType.Create(this);

            DatawalletModificationEntityType.CreateForeignKey1(datawalletModification, datawallet);
            ExternalEventEntityType.CreateForeignKey1(externalEvent, syncRun);
            SyncErrorEntityType.CreateForeignKey1(syncError, externalEvent);
            SyncErrorEntityType.CreateForeignKey2(syncError, syncRun);

            DatawalletEntityType.CreateAnnotations(datawallet);
            DatawalletModificationEntityType.CreateAnnotations(datawalletModification);
            ExternalEventEntityType.CreateAnnotations(externalEvent);
            SyncErrorEntityType.CreateAnnotations(syncError);
            SyncRunEntityType.CreateAnnotations(syncRun);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var datawallet = FindEntityType("Backbone.Modules.Synchronization.Domain.Entities.Datawallet")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            datawallet.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var backboneModulesSynchronizationDomainEntitiesDatawalletTableBase = new TableBase("Backbone.Modules.Synchronization.Domain.Entities.Datawallet", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesSynchronizationDomainEntitiesDatawalletTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletTableBase.Columns.Add("Id", idColumnBase);
            var ownerColumnBase = new ColumnBase<ColumnMappingBase>("Owner", "char(36)", backboneModulesSynchronizationDomainEntitiesDatawalletTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletTableBase.Columns.Add("Owner", ownerColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "int", backboneModulesSynchronizationDomainEntitiesDatawalletTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Synchronization.Domain.Entities.Datawallet", backboneModulesSynchronizationDomainEntitiesDatawalletTableBase);
            var backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase = new TableMappingBase<ColumnMappingBase>(datawallet, backboneModulesSynchronizationDomainEntitiesDatawalletTableBase, true);
            backboneModulesSynchronizationDomainEntitiesDatawalletTableBase.AddTypeMapping(backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase, false);
            defaultTableMappings.Add(backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, datawallet.FindProperty("Id")!, backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ownerColumnBase, datawallet.FindProperty("Owner")!, backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, datawallet.FindProperty("Version")!, backboneModulesSynchronizationDomainEntitiesDatawalletMappingBase);

            var tableMappings = new List<TableMapping>();
            datawallet.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var datawalletsTable = new Table("Datawallets", null, relationalModel);
            var idColumn = new Column("Id", "char(20)", datawalletsTable);
            datawalletsTable.Columns.Add("Id", idColumn);
            var ownerColumn = new Column("Owner", "char(36)", datawalletsTable);
            datawalletsTable.Columns.Add("Owner", ownerColumn);
            var versionColumn = new Column("Version", "int", datawalletsTable);
            datawalletsTable.Columns.Add("Version", versionColumn);
            var pK_Datawallets = new UniqueConstraint("PK_Datawallets", datawalletsTable, new[] { idColumn });
            datawalletsTable.PrimaryKey = pK_Datawallets;
            var pK_DatawalletsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Datawallet",
                new[] { "Id" });
            pK_Datawallets.MappedKeys.Add(pK_DatawalletsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DatawalletsUc).Add(pK_Datawallets);
            datawalletsTable.UniqueConstraints.Add("PK_Datawallets", pK_Datawallets);
            var iX_Datawallets_Owner = new TableIndex(
            "IX_Datawallets_Owner", datawalletsTable, new[] { ownerColumn }, true);
            var iX_Datawallets_OwnerIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Datawallet",
                new[] { "Owner" });
            iX_Datawallets_Owner.MappedIndexes.Add(iX_Datawallets_OwnerIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Datawallets_OwnerIx).Add(iX_Datawallets_Owner);
            datawalletsTable.Indexes.Add("IX_Datawallets_Owner", iX_Datawallets_Owner);
            relationalModel.Tables.Add(("Datawallets", null), datawalletsTable);
            var datawalletsTableMapping = new TableMapping(datawallet, datawalletsTable, true);
            datawalletsTable.AddTypeMapping(datawalletsTableMapping, false);
            tableMappings.Add(datawalletsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, datawallet.FindProperty("Id")!, datawalletsTableMapping);
            RelationalModel.CreateColumnMapping(ownerColumn, datawallet.FindProperty("Owner")!, datawalletsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, datawallet.FindProperty("Version")!, datawalletsTableMapping);

            var datawalletModification = FindEntityType("Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            datawalletModification.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase = new TableBase("Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification", null, relationalModel);
            var blobReferenceColumnBase = new ColumnBase<ColumnMappingBase>("BlobReference", "char(32)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("BlobReference", blobReferenceColumnBase);
            var collectionColumnBase = new ColumnBase<ColumnMappingBase>("Collection", "nvarchar(50)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("Collection", collectionColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "char(36)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var createdByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("CreatedByDevice", "char(20)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("CreatedByDevice", createdByDeviceColumnBase);
            var datawalletIdColumnBase = new ColumnBase<ColumnMappingBase>("DatawalletId", "char(20)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase)
            {
                IsNullable = true
            };
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("DatawalletId", datawalletIdColumnBase);
            var datawalletVersionColumnBase = new ColumnBase<ColumnMappingBase>("DatawalletVersion", "int", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("DatawalletVersion", datawalletVersionColumnBase);
            var encryptedPayloadColumnBase = new ColumnBase<ColumnMappingBase>("EncryptedPayload", "varbinary(max)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase)
            {
                IsNullable = true
            };
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("EncryptedPayload", encryptedPayloadColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("Id", idColumnBase0);
            var indexColumnBase = new ColumnBase<ColumnMappingBase>("Index", "bigint", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("Index", indexColumnBase);
            var objectIdentifierColumnBase = new ColumnBase<ColumnMappingBase>("ObjectIdentifier", "nvarchar(100)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("ObjectIdentifier", objectIdentifierColumnBase);
            var payloadCategoryColumnBase = new ColumnBase<ColumnMappingBase>("PayloadCategory", "nvarchar(50)", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase)
            {
                IsNullable = true
            };
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("PayloadCategory", payloadCategoryColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "int", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification", backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase);
            var backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase = new TableMappingBase<ColumnMappingBase>(datawalletModification, backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase, true);
            backboneModulesSynchronizationDomainEntitiesDatawalletModificationTableBase.AddTypeMapping(backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase, false);
            defaultTableMappings0.Add(backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, datawalletModification.FindProperty("Id")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blobReferenceColumnBase, datawalletModification.FindProperty("BlobReference")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)collectionColumnBase, datawalletModification.FindProperty("Collection")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, datawalletModification.FindProperty("CreatedAt")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, datawalletModification.FindProperty("CreatedBy")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByDeviceColumnBase, datawalletModification.FindProperty("CreatedByDevice")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)datawalletIdColumnBase, datawalletModification.FindProperty("DatawalletId")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)datawalletVersionColumnBase, datawalletModification.FindProperty("DatawalletVersion")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)encryptedPayloadColumnBase, datawalletModification.FindProperty("EncryptedPayload")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase, datawalletModification.FindProperty("Index")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)objectIdentifierColumnBase, datawalletModification.FindProperty("ObjectIdentifier")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payloadCategoryColumnBase, datawalletModification.FindProperty("PayloadCategory")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, datawalletModification.FindProperty("Type")!, backboneModulesSynchronizationDomainEntitiesDatawalletModificationMappingBase);

            var tableMappings0 = new List<TableMapping>();
            datawalletModification.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var datawalletModificationsTable = new Table("DatawalletModifications", null, relationalModel);
            var idColumn0 = new Column("Id", "char(20)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("Id", idColumn0);
            var blobReferenceColumn = new Column("BlobReference", "char(32)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("BlobReference", blobReferenceColumn);
            var collectionColumn = new Column("Collection", "nvarchar(50)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("Collection", collectionColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("CreatedAt", createdAtColumn);
            var createdByColumn = new Column("CreatedBy", "char(36)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("CreatedBy", createdByColumn);
            var createdByDeviceColumn = new Column("CreatedByDevice", "char(20)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("CreatedByDevice", createdByDeviceColumn);
            var datawalletIdColumn = new Column("DatawalletId", "char(20)", datawalletModificationsTable)
            {
                IsNullable = true
            };
            datawalletModificationsTable.Columns.Add("DatawalletId", datawalletIdColumn);
            var datawalletVersionColumn = new Column("DatawalletVersion", "int", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("DatawalletVersion", datawalletVersionColumn);
            var encryptedPayloadColumn = new Column("EncryptedPayload", "varbinary(max)", datawalletModificationsTable)
            {
                IsNullable = true
            };
            datawalletModificationsTable.Columns.Add("EncryptedPayload", encryptedPayloadColumn);
            var indexColumn = new Column("Index", "bigint", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("Index", indexColumn);
            var objectIdentifierColumn = new Column("ObjectIdentifier", "nvarchar(100)", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("ObjectIdentifier", objectIdentifierColumn);
            var payloadCategoryColumn = new Column("PayloadCategory", "nvarchar(50)", datawalletModificationsTable)
            {
                IsNullable = true
            };
            datawalletModificationsTable.Columns.Add("PayloadCategory", payloadCategoryColumn);
            var typeColumn = new Column("Type", "int", datawalletModificationsTable);
            datawalletModificationsTable.Columns.Add("Type", typeColumn);
            var pK_DatawalletModifications = new UniqueConstraint("PK_DatawalletModifications", datawalletModificationsTable, new[] { idColumn0 });
            datawalletModificationsTable.PrimaryKey = pK_DatawalletModifications;
            var pK_DatawalletModificationsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification",
                new[] { "Id" });
            pK_DatawalletModifications.MappedKeys.Add(pK_DatawalletModificationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DatawalletModificationsUc).Add(pK_DatawalletModifications);
            datawalletModificationsTable.UniqueConstraints.Add("PK_DatawalletModifications", pK_DatawalletModifications);
            var iX_DatawalletModifications_CreatedBy = new TableIndex(
            "IX_DatawalletModifications_CreatedBy", datawalletModificationsTable, new[] { createdByColumn }, false);
            var iX_DatawalletModifications_CreatedByIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification",
                new[] { "CreatedBy" });
            iX_DatawalletModifications_CreatedBy.MappedIndexes.Add(iX_DatawalletModifications_CreatedByIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DatawalletModifications_CreatedByIx).Add(iX_DatawalletModifications_CreatedBy);
            datawalletModificationsTable.Indexes.Add("IX_DatawalletModifications_CreatedBy", iX_DatawalletModifications_CreatedBy);
            var iX_DatawalletModifications_CreatedBy_Index = new TableIndex(
            "IX_DatawalletModifications_CreatedBy_Index", datawalletModificationsTable, new[] { createdByColumn, indexColumn }, true);
            var iX_DatawalletModifications_CreatedBy_IndexIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification",
                new[] { "CreatedBy", "Index" });
            iX_DatawalletModifications_CreatedBy_Index.MappedIndexes.Add(iX_DatawalletModifications_CreatedBy_IndexIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DatawalletModifications_CreatedBy_IndexIx).Add(iX_DatawalletModifications_CreatedBy_Index);
            datawalletModificationsTable.Indexes.Add("IX_DatawalletModifications_CreatedBy_Index", iX_DatawalletModifications_CreatedBy_Index);
            var iX_DatawalletModifications_DatawalletId = new TableIndex(
            "IX_DatawalletModifications_DatawalletId", datawalletModificationsTable, new[] { datawalletIdColumn }, false);
            var iX_DatawalletModifications_DatawalletIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification",
                new[] { "DatawalletId" });
            iX_DatawalletModifications_DatawalletId.MappedIndexes.Add(iX_DatawalletModifications_DatawalletIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DatawalletModifications_DatawalletIdIx).Add(iX_DatawalletModifications_DatawalletId);
            datawalletModificationsTable.Indexes.Add("IX_DatawalletModifications_DatawalletId", iX_DatawalletModifications_DatawalletId);
            relationalModel.Tables.Add(("DatawalletModifications", null), datawalletModificationsTable);
            var datawalletModificationsTableMapping = new TableMapping(datawalletModification, datawalletModificationsTable, true);
            datawalletModificationsTable.AddTypeMapping(datawalletModificationsTableMapping, false);
            tableMappings0.Add(datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, datawalletModification.FindProperty("Id")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(blobReferenceColumn, datawalletModification.FindProperty("BlobReference")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(collectionColumn, datawalletModification.FindProperty("Collection")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, datawalletModification.FindProperty("CreatedAt")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, datawalletModification.FindProperty("CreatedBy")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(createdByDeviceColumn, datawalletModification.FindProperty("CreatedByDevice")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(datawalletIdColumn, datawalletModification.FindProperty("DatawalletId")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(datawalletVersionColumn, datawalletModification.FindProperty("DatawalletVersion")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(encryptedPayloadColumn, datawalletModification.FindProperty("EncryptedPayload")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn, datawalletModification.FindProperty("Index")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(objectIdentifierColumn, datawalletModification.FindProperty("ObjectIdentifier")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(payloadCategoryColumn, datawalletModification.FindProperty("PayloadCategory")!, datawalletModificationsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, datawalletModification.FindProperty("Type")!, datawalletModificationsTableMapping);

            var externalEvent = FindEntityType("Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            externalEvent.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase = new TableBase("Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("Id", idColumnBase1);
            var indexColumnBase0 = new ColumnBase<ColumnMappingBase>("Index", "bigint", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("Index", indexColumnBase0);
            var ownerColumnBase0 = new ColumnBase<ColumnMappingBase>("Owner", "char(36)", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("Owner", ownerColumnBase0);
            var payloadColumnBase = new ColumnBase<ColumnMappingBase>("Payload", "nvarchar(200)", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("Payload", payloadColumnBase);
            var syncErrorCountColumnBase = new ColumnBase<ColumnMappingBase>("SyncErrorCount", "tinyint", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("SyncErrorCount", syncErrorCountColumnBase);
            var syncRunIdColumnBase = new ColumnBase<ColumnMappingBase>("SyncRunId", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase)
            {
                IsNullable = true
            };
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("SyncRunId", syncRunIdColumnBase);
            var typeColumnBase0 = new ColumnBase<ColumnMappingBase>("Type", "int", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.Columns.Add("Type", typeColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent", backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase);
            var backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase = new TableMappingBase<ColumnMappingBase>(externalEvent, backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase, true);
            backboneModulesSynchronizationDomainEntitiesSyncExternalEventTableBase.AddTypeMapping(backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase, false);
            defaultTableMappings1.Add(backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, externalEvent.FindProperty("Id")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, externalEvent.FindProperty("CreatedAt")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase0, externalEvent.FindProperty("Index")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ownerColumnBase0, externalEvent.FindProperty("Owner")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)payloadColumnBase, externalEvent.FindProperty("Payload")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)syncErrorCountColumnBase, externalEvent.FindProperty("SyncErrorCount")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)syncRunIdColumnBase, externalEvent.FindProperty("SyncRunId")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase0, externalEvent.FindProperty("Type")!, backboneModulesSynchronizationDomainEntitiesSyncExternalEventMappingBase);

            var tableMappings1 = new List<TableMapping>();
            externalEvent.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var externalEventsTable = new Table("ExternalEvents", null, relationalModel);
            var idColumn1 = new Column("Id", "char(20)", externalEventsTable);
            externalEventsTable.Columns.Add("Id", idColumn1);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", externalEventsTable);
            externalEventsTable.Columns.Add("CreatedAt", createdAtColumn0);
            var indexColumn0 = new Column("Index", "bigint", externalEventsTable);
            externalEventsTable.Columns.Add("Index", indexColumn0);
            var ownerColumn0 = new Column("Owner", "char(36)", externalEventsTable);
            externalEventsTable.Columns.Add("Owner", ownerColumn0);
            var payloadColumn = new Column("Payload", "nvarchar(200)", externalEventsTable);
            externalEventsTable.Columns.Add("Payload", payloadColumn);
            var syncErrorCountColumn = new Column("SyncErrorCount", "tinyint", externalEventsTable);
            externalEventsTable.Columns.Add("SyncErrorCount", syncErrorCountColumn);
            var syncRunIdColumn = new Column("SyncRunId", "char(20)", externalEventsTable)
            {
                IsNullable = true
            };
            externalEventsTable.Columns.Add("SyncRunId", syncRunIdColumn);
            var typeColumn0 = new Column("Type", "int", externalEventsTable);
            externalEventsTable.Columns.Add("Type", typeColumn0);
            var pK_ExternalEvents = new UniqueConstraint("PK_ExternalEvents", externalEventsTable, new[] { idColumn1 });
            externalEventsTable.PrimaryKey = pK_ExternalEvents;
            var pK_ExternalEventsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "Id" });
            pK_ExternalEvents.MappedKeys.Add(pK_ExternalEventsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExternalEventsUc).Add(pK_ExternalEvents);
            externalEventsTable.UniqueConstraints.Add("PK_ExternalEvents", pK_ExternalEvents);
            var iX_ExternalEvents_Owner_Index = new TableIndex(
            "IX_ExternalEvents_Owner_Index", externalEventsTable, new[] { ownerColumn0, indexColumn0 }, true);
            var iX_ExternalEvents_Owner_IndexIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "Owner", "Index" });
            iX_ExternalEvents_Owner_Index.MappedIndexes.Add(iX_ExternalEvents_Owner_IndexIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExternalEvents_Owner_IndexIx).Add(iX_ExternalEvents_Owner_Index);
            externalEventsTable.Indexes.Add("IX_ExternalEvents_Owner_Index", iX_ExternalEvents_Owner_Index);
            var iX_ExternalEvents_Owner_SyncRunId = new TableIndex(
            "IX_ExternalEvents_Owner_SyncRunId", externalEventsTable, new[] { ownerColumn0, syncRunIdColumn }, false);
            var iX_ExternalEvents_Owner_SyncRunIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "Owner", "SyncRunId" });
            iX_ExternalEvents_Owner_SyncRunId.MappedIndexes.Add(iX_ExternalEvents_Owner_SyncRunIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExternalEvents_Owner_SyncRunIdIx).Add(iX_ExternalEvents_Owner_SyncRunId);
            externalEventsTable.Indexes.Add("IX_ExternalEvents_Owner_SyncRunId", iX_ExternalEvents_Owner_SyncRunId);
            var iX_ExternalEvents_SyncRunId = new TableIndex(
            "IX_ExternalEvents_SyncRunId", externalEventsTable, new[] { syncRunIdColumn }, false);
            var iX_ExternalEvents_SyncRunIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "SyncRunId" });
            iX_ExternalEvents_SyncRunId.MappedIndexes.Add(iX_ExternalEvents_SyncRunIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExternalEvents_SyncRunIdIx).Add(iX_ExternalEvents_SyncRunId);
            externalEventsTable.Indexes.Add("IX_ExternalEvents_SyncRunId", iX_ExternalEvents_SyncRunId);
            relationalModel.Tables.Add(("ExternalEvents", null), externalEventsTable);
            var externalEventsTableMapping = new TableMapping(externalEvent, externalEventsTable, true);
            externalEventsTable.AddTypeMapping(externalEventsTableMapping, false);
            tableMappings1.Add(externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, externalEvent.FindProperty("Id")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, externalEvent.FindProperty("CreatedAt")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn0, externalEvent.FindProperty("Index")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(ownerColumn0, externalEvent.FindProperty("Owner")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(payloadColumn, externalEvent.FindProperty("Payload")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(syncErrorCountColumn, externalEvent.FindProperty("SyncErrorCount")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(syncRunIdColumn, externalEvent.FindProperty("SyncRunId")!, externalEventsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn0, externalEvent.FindProperty("Type")!, externalEventsTableMapping);

            var syncError = FindEntityType("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            syncError.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase = new TableBase("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError", null, relationalModel);
            var errorCodeColumnBase = new ColumnBase<ColumnMappingBase>("ErrorCode", "nvarchar(50)", backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase.Columns.Add("ErrorCode", errorCodeColumnBase);
            var externalEventIdColumnBase = new ColumnBase<ColumnMappingBase>("ExternalEventId", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase.Columns.Add("ExternalEventId", externalEventIdColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase.Columns.Add("Id", idColumnBase2);
            var syncRunIdColumnBase0 = new ColumnBase<ColumnMappingBase>("SyncRunId", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase.Columns.Add("SyncRunId", syncRunIdColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError", backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase);
            var backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase = new TableMappingBase<ColumnMappingBase>(syncError, backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase, true);
            backboneModulesSynchronizationDomainEntitiesSyncSyncErrorTableBase.AddTypeMapping(backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase, false);
            defaultTableMappings2.Add(backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, syncError.FindProperty("Id")!, backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)errorCodeColumnBase, syncError.FindProperty("ErrorCode")!, backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)externalEventIdColumnBase, syncError.FindProperty("ExternalEventId")!, backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)syncRunIdColumnBase0, syncError.FindProperty("SyncRunId")!, backboneModulesSynchronizationDomainEntitiesSyncSyncErrorMappingBase);

            var tableMappings2 = new List<TableMapping>();
            syncError.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var syncErrorsTable = new Table("SyncErrors", null, relationalModel);
            var idColumn2 = new Column("Id", "char(20)", syncErrorsTable);
            syncErrorsTable.Columns.Add("Id", idColumn2);
            var errorCodeColumn = new Column("ErrorCode", "nvarchar(50)", syncErrorsTable);
            syncErrorsTable.Columns.Add("ErrorCode", errorCodeColumn);
            var externalEventIdColumn = new Column("ExternalEventId", "char(20)", syncErrorsTable);
            syncErrorsTable.Columns.Add("ExternalEventId", externalEventIdColumn);
            var syncRunIdColumn0 = new Column("SyncRunId", "char(20)", syncErrorsTable);
            syncErrorsTable.Columns.Add("SyncRunId", syncRunIdColumn0);
            var pK_SyncErrors = new UniqueConstraint("PK_SyncErrors", syncErrorsTable, new[] { idColumn2 });
            syncErrorsTable.PrimaryKey = pK_SyncErrors;
            var pK_SyncErrorsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                new[] { "Id" });
            pK_SyncErrors.MappedKeys.Add(pK_SyncErrorsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SyncErrorsUc).Add(pK_SyncErrors);
            syncErrorsTable.UniqueConstraints.Add("PK_SyncErrors", pK_SyncErrors);
            var iX_SyncErrors_ExternalEventId = new TableIndex(
            "IX_SyncErrors_ExternalEventId", syncErrorsTable, new[] { externalEventIdColumn }, false);
            var iX_SyncErrors_ExternalEventIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                new[] { "ExternalEventId" });
            iX_SyncErrors_ExternalEventId.MappedIndexes.Add(iX_SyncErrors_ExternalEventIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SyncErrors_ExternalEventIdIx).Add(iX_SyncErrors_ExternalEventId);
            syncErrorsTable.Indexes.Add("IX_SyncErrors_ExternalEventId", iX_SyncErrors_ExternalEventId);
            var iX_SyncErrors_SyncRunId_ExternalEventId = new TableIndex(
            "IX_SyncErrors_SyncRunId_ExternalEventId", syncErrorsTable, new[] { syncRunIdColumn0, externalEventIdColumn }, true);
            var iX_SyncErrors_SyncRunId_ExternalEventIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                new[] { "SyncRunId", "ExternalEventId" });
            iX_SyncErrors_SyncRunId_ExternalEventId.MappedIndexes.Add(iX_SyncErrors_SyncRunId_ExternalEventIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SyncErrors_SyncRunId_ExternalEventIdIx).Add(iX_SyncErrors_SyncRunId_ExternalEventId);
            syncErrorsTable.Indexes.Add("IX_SyncErrors_SyncRunId_ExternalEventId", iX_SyncErrors_SyncRunId_ExternalEventId);
            relationalModel.Tables.Add(("SyncErrors", null), syncErrorsTable);
            var syncErrorsTableMapping = new TableMapping(syncError, syncErrorsTable, true);
            syncErrorsTable.AddTypeMapping(syncErrorsTableMapping, false);
            tableMappings2.Add(syncErrorsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, syncError.FindProperty("Id")!, syncErrorsTableMapping);
            RelationalModel.CreateColumnMapping(errorCodeColumn, syncError.FindProperty("ErrorCode")!, syncErrorsTableMapping);
            RelationalModel.CreateColumnMapping(externalEventIdColumn, syncError.FindProperty("ExternalEventId")!, syncErrorsTableMapping);
            RelationalModel.CreateColumnMapping(syncRunIdColumn0, syncError.FindProperty("SyncRunId")!, syncErrorsTableMapping);

            var syncRun = FindEntityType("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            syncRun.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase = new TableBase("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun", null, relationalModel);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "char(36)", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var createdByDeviceColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedByDevice", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("CreatedByDevice", createdByDeviceColumnBase0);
            var eventCountColumnBase = new ColumnBase<ColumnMappingBase>("EventCount", "int", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("EventCount", eventCountColumnBase);
            var expiresAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpiresAt", "datetime2", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("ExpiresAt", expiresAtColumnBase);
            var finalizedAtColumnBase = new ColumnBase<ColumnMappingBase>("FinalizedAt", "datetime2", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase)
            {
                IsNullable = true
            };
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("FinalizedAt", finalizedAtColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("Id", idColumnBase3);
            var indexColumnBase1 = new ColumnBase<ColumnMappingBase>("Index", "bigint", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("Index", indexColumnBase1);
            var typeColumnBase1 = new ColumnBase<ColumnMappingBase>("Type", "int", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.Columns.Add("Type", typeColumnBase1);
            relationalModel.DefaultTables.Add("Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun", backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase);
            var backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase = new TableMappingBase<ColumnMappingBase>(syncRun, backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase, true);
            backboneModulesSynchronizationDomainEntitiesSyncSyncRunTableBase.AddTypeMapping(backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase, false);
            defaultTableMappings3.Add(backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, syncRun.FindProperty("Id")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, syncRun.FindProperty("CreatedAt")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, syncRun.FindProperty("CreatedBy")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByDeviceColumnBase0, syncRun.FindProperty("CreatedByDevice")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventCountColumnBase, syncRun.FindProperty("EventCount")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresAtColumnBase, syncRun.FindProperty("ExpiresAt")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)finalizedAtColumnBase, syncRun.FindProperty("FinalizedAt")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase1, syncRun.FindProperty("Index")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase1, syncRun.FindProperty("Type")!, backboneModulesSynchronizationDomainEntitiesSyncSyncRunMappingBase);

            var tableMappings3 = new List<TableMapping>();
            syncRun.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var syncRunsTable = new Table("SyncRuns", null, relationalModel);
            var idColumn3 = new Column("Id", "char(20)", syncRunsTable);
            syncRunsTable.Columns.Add("Id", idColumn3);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", syncRunsTable);
            syncRunsTable.Columns.Add("CreatedAt", createdAtColumn1);
            var createdByColumn0 = new Column("CreatedBy", "char(36)", syncRunsTable);
            syncRunsTable.Columns.Add("CreatedBy", createdByColumn0);
            var createdByDeviceColumn0 = new Column("CreatedByDevice", "char(20)", syncRunsTable);
            syncRunsTable.Columns.Add("CreatedByDevice", createdByDeviceColumn0);
            var eventCountColumn = new Column("EventCount", "int", syncRunsTable);
            syncRunsTable.Columns.Add("EventCount", eventCountColumn);
            var expiresAtColumn = new Column("ExpiresAt", "datetime2", syncRunsTable);
            syncRunsTable.Columns.Add("ExpiresAt", expiresAtColumn);
            var finalizedAtColumn = new Column("FinalizedAt", "datetime2", syncRunsTable)
            {
                IsNullable = true
            };
            syncRunsTable.Columns.Add("FinalizedAt", finalizedAtColumn);
            var indexColumn1 = new Column("Index", "bigint", syncRunsTable);
            syncRunsTable.Columns.Add("Index", indexColumn1);
            var typeColumn1 = new Column("Type", "int", syncRunsTable);
            syncRunsTable.Columns.Add("Type", typeColumn1);
            var pK_SyncRuns = new UniqueConstraint("PK_SyncRuns", syncRunsTable, new[] { idColumn3 });
            syncRunsTable.PrimaryKey = pK_SyncRuns;
            var pK_SyncRunsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "Id" });
            pK_SyncRuns.MappedKeys.Add(pK_SyncRunsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SyncRunsUc).Add(pK_SyncRuns);
            syncRunsTable.UniqueConstraints.Add("PK_SyncRuns", pK_SyncRuns);
            var iX_SyncRuns_CreatedBy = new TableIndex(
            "IX_SyncRuns_CreatedBy", syncRunsTable, new[] { createdByColumn0 }, false);
            var iX_SyncRuns_CreatedByIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "CreatedBy" });
            iX_SyncRuns_CreatedBy.MappedIndexes.Add(iX_SyncRuns_CreatedByIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SyncRuns_CreatedByIx).Add(iX_SyncRuns_CreatedBy);
            syncRunsTable.Indexes.Add("IX_SyncRuns_CreatedBy", iX_SyncRuns_CreatedBy);
            var iX_SyncRuns_CreatedBy_FinalizedAt = new TableIndex(
            "IX_SyncRuns_CreatedBy_FinalizedAt", syncRunsTable, new[] { createdByColumn0, finalizedAtColumn }, false);
            var iX_SyncRuns_CreatedBy_FinalizedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "CreatedBy", "FinalizedAt" });
            iX_SyncRuns_CreatedBy_FinalizedAt.MappedIndexes.Add(iX_SyncRuns_CreatedBy_FinalizedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SyncRuns_CreatedBy_FinalizedAtIx).Add(iX_SyncRuns_CreatedBy_FinalizedAt);
            syncRunsTable.Indexes.Add("IX_SyncRuns_CreatedBy_FinalizedAt", iX_SyncRuns_CreatedBy_FinalizedAt);
            var iX_SyncRuns_CreatedBy_Index = new TableIndex(
            "IX_SyncRuns_CreatedBy_Index", syncRunsTable, new[] { createdByColumn0, indexColumn1 }, true);
            var iX_SyncRuns_CreatedBy_IndexIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "CreatedBy", "Index" });
            iX_SyncRuns_CreatedBy_Index.MappedIndexes.Add(iX_SyncRuns_CreatedBy_IndexIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SyncRuns_CreatedBy_IndexIx).Add(iX_SyncRuns_CreatedBy_Index);
            syncRunsTable.Indexes.Add("IX_SyncRuns_CreatedBy_Index", iX_SyncRuns_CreatedBy_Index);
            relationalModel.Tables.Add(("SyncRuns", null), syncRunsTable);
            var syncRunsTableMapping = new TableMapping(syncRun, syncRunsTable, true);
            syncRunsTable.AddTypeMapping(syncRunsTableMapping, false);
            tableMappings3.Add(syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, syncRun.FindProperty("Id")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, syncRun.FindProperty("CreatedAt")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, syncRun.FindProperty("CreatedBy")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(createdByDeviceColumn0, syncRun.FindProperty("CreatedByDevice")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(eventCountColumn, syncRun.FindProperty("EventCount")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(expiresAtColumn, syncRun.FindProperty("ExpiresAt")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(finalizedAtColumn, syncRun.FindProperty("FinalizedAt")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn1, syncRun.FindProperty("Index")!, syncRunsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn1, syncRun.FindProperty("Type")!, syncRunsTableMapping);
            var fK_DatawalletModifications_Datawallets_DatawalletId = new ForeignKeyConstraint(
                "FK_DatawalletModifications_Datawallets_DatawalletId", datawalletModificationsTable, datawalletsTable,
                new[] { datawalletIdColumn },
                datawalletsTable.FindUniqueConstraint("PK_Datawallets")!, ReferentialAction.NoAction);
            var fK_DatawalletModifications_Datawallets_DatawalletIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.DatawalletModification",
                new[] { "DatawalletId" },
                "Backbone.Modules.Synchronization.Domain.Entities.Datawallet",
                new[] { "Id" });
            fK_DatawalletModifications_Datawallets_DatawalletId.MappedForeignKeys.Add(fK_DatawalletModifications_Datawallets_DatawalletIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DatawalletModifications_Datawallets_DatawalletIdFk).Add(fK_DatawalletModifications_Datawallets_DatawalletId);
            datawalletModificationsTable.ForeignKeyConstraints.Add(fK_DatawalletModifications_Datawallets_DatawalletId);
            datawalletsTable.ReferencingForeignKeyConstraints.Add(fK_DatawalletModifications_Datawallets_DatawalletId);
            var fK_ExternalEvents_SyncRuns_SyncRunId = new ForeignKeyConstraint(
                "FK_ExternalEvents_SyncRuns_SyncRunId", externalEventsTable, syncRunsTable,
                new[] { syncRunIdColumn },
                syncRunsTable.FindUniqueConstraint("PK_SyncRuns")!, ReferentialAction.NoAction);
            var fK_ExternalEvents_SyncRuns_SyncRunIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "SyncRunId" },
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "Id" });
            fK_ExternalEvents_SyncRuns_SyncRunId.MappedForeignKeys.Add(fK_ExternalEvents_SyncRuns_SyncRunIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExternalEvents_SyncRuns_SyncRunIdFk).Add(fK_ExternalEvents_SyncRuns_SyncRunId);
            externalEventsTable.ForeignKeyConstraints.Add(fK_ExternalEvents_SyncRuns_SyncRunId);
            syncRunsTable.ReferencingForeignKeyConstraints.Add(fK_ExternalEvents_SyncRuns_SyncRunId);
            var fK_SyncErrors_ExternalEvents_ExternalEventId = new ForeignKeyConstraint(
                "FK_SyncErrors_ExternalEvents_ExternalEventId", syncErrorsTable, externalEventsTable,
                new[] { externalEventIdColumn },
                externalEventsTable.FindUniqueConstraint("PK_ExternalEvents")!, ReferentialAction.Cascade);
            var fK_SyncErrors_ExternalEvents_ExternalEventIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                new[] { "ExternalEventId" },
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.ExternalEvent",
                new[] { "Id" });
            fK_SyncErrors_ExternalEvents_ExternalEventId.MappedForeignKeys.Add(fK_SyncErrors_ExternalEvents_ExternalEventIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SyncErrors_ExternalEvents_ExternalEventIdFk).Add(fK_SyncErrors_ExternalEvents_ExternalEventId);
            syncErrorsTable.ForeignKeyConstraints.Add(fK_SyncErrors_ExternalEvents_ExternalEventId);
            externalEventsTable.ReferencingForeignKeyConstraints.Add(fK_SyncErrors_ExternalEvents_ExternalEventId);
            var fK_SyncErrors_SyncRuns_SyncRunId = new ForeignKeyConstraint(
                "FK_SyncErrors_SyncRuns_SyncRunId", syncErrorsTable, syncRunsTable,
                new[] { syncRunIdColumn0 },
                syncRunsTable.FindUniqueConstraint("PK_SyncRuns")!, ReferentialAction.Cascade);
            var fK_SyncErrors_SyncRuns_SyncRunIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncError",
                new[] { "SyncRunId" },
                "Backbone.Modules.Synchronization.Domain.Entities.Sync.SyncRun",
                new[] { "Id" });
            fK_SyncErrors_SyncRuns_SyncRunId.MappedForeignKeys.Add(fK_SyncErrors_SyncRuns_SyncRunIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SyncErrors_SyncRuns_SyncRunIdFk).Add(fK_SyncErrors_SyncRuns_SyncRunId);
            syncErrorsTable.ForeignKeyConstraints.Add(fK_SyncErrors_SyncRuns_SyncRunId);
            syncRunsTable.ReferencingForeignKeyConstraints.Add(fK_SyncErrors_SyncRuns_SyncRunId);
            return relationalModel.MakeReadOnly();
        }
    }
}
