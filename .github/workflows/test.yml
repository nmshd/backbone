name: Test

on:
  push:
    branches-ignore:
      - "main"
    tags-ignore:
      - "**"

jobs:
  run-adminUi-checks:
    runs-on: ubuntu-latest
    name: Run Admin UI Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Checks
        run: ./.ci/aui/runChecks.sh

  run-adminUi-flutter-checks:
    runs-on: ubuntu-latest
    name: Run Admin UI Flutter Checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2.16.0
      - name: Run checks
        run: ./.ci/aui/runFlutterChecks.sh

  check-formatting:
    runs-on: ubuntu-latest
    name: Check Formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - name: Check formatting
        run: ./.ci/checkFormatting.sh

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"
      - name: Run tests
        run: ./.ci/test.sh
        env:
          DOTNET_CONSOLE_ANSI_COLOR: true

  integration-test-sqlserver:
    name: Run Integration Tests (on SQL Server)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Run integration tests
        run: ./.ci/integrationTest.sqlserver.sh
      - name: Save Docker Logs
        if: failure()
        run: docker compose -f ./.ci/docker-compose.test.yml -f ./.ci/docker-compose.test.sqlserver.yml logs > docker-log.txt
      - name: Archive logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-sqlserver-docker-logs
          path: docker-log.txt
        env:
          DOTNET_CONSOLE_ANSI_COLOR: true

  integration-test-postgres:
    name: Run Integration Tests (on Postgres)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Run integration tests
        run: ./.ci/integrationTest.postgres.sh
      - name: Save Docker Logs
        if: failure()
        run: docker compose -f ./.ci/docker-compose.test.yml -f ./.ci/docker-compose.test.postgres.yml logs > docker-log.txt
      - name: Archive logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-postgres-docker-logs
          path: docker-log.txt
        env:
          DOTNET_CONSOLE_ANSI_COLOR: true

  transport-test-sqlserver:
    name: Run transport Tests (on SQL Server)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backbone repository
        uses: actions/checkout@v4
        with:
          path: backbone
      - name: Checkout runtime repository
        uses: actions/checkout@v4
        with:
          repository: nmshd/runtime
          path: runtime
      - name: Run Consumer API
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.sqlserver.yml up -d
      - name: Install runtime dependencies
        working-directory: ./runtime
        run: npm install
      - name: Run transport Tests
        working-directory: ./runtime/packages/transport
        env:
          NMSHD_TEST_BASEURL: http://localhost:5000
          NMSHD_TEST_CLIENTID: test
          NMSHD_TEST_CLIENTSECRET: test
        run: npm run test:local:lokijs
      - name: Save Docker Logs
        if: failure()
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.sqlserver.yml logs > docker-log.txt
      - name: Archive logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: transport-test-sqlserver-docker-logs
          path: docker-log.txt
      - name: Stop Consumer API
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.sqlserver.yml down

  transport-test-postgres:
    name: Run transport Tests (on Postgres)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backbone repository
        uses: actions/checkout@v4
        with:
          path: backbone
      - name: Checkout runtime repository
        uses: actions/checkout@v4
        with:
          repository: nmshd/runtime
          path: runtime
      - name: Run Consumer API
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.postgres.yml up -d
      - name: Install runtime dependencies
        working-directory: ./runtime
        run: npm install
      - name: Run transport Tests
        working-directory: ./runtime/packages/transport
        env:
          NMSHD_TEST_BASEURL: http://localhost:5000
          NMSHD_TEST_CLIENTID: test
          NMSHD_TEST_CLIENTSECRET: test
        run: npm run test:local:lokijs
      - name: Save Docker Logs
        if: failure()
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.postgres.yml logs > docker-log.txt
      - name: Archive logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: transport-test-postgres-docker-logs
          path: docker-log.txt
      - name: Stop Consumer API
        run: docker compose -f ./backbone/.ci/docker-compose.test.yml -f ./backbone/.ci/docker-compose.test.postgres.yml down

  build-helm-chart:
    name: Build Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Build Helm Chart
        run: ./.ci/helm/buildChart.js
        env:
          VERSION: 0.0.0

  build-capi-container-image:
    name: Build Consumer API Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: ./.ci/capi/buildContainerImage.js
        env:
          TAG: test
          PLATFORMS: linux/amd64

  build-eh-container-image:
    name: Build Event Handler Service Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: ./.ci/eh/buildContainerImage.js
        env:
          TAG: test
          PLATFORMS: linux/amd64

  build-aui-container-image:
    name: Build Admin UI Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: ./.ci/aui/buildContainerImage.js
        env:
          TAG: test
          PLATFORMS: linux/amd64

  build-acli-container-image:
    name: Build Admin CLI Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: ./.ci/acli/buildContainerImage.js
        env:
          TAG: test
          PLATFORMS: linux/amd64

  build-fsc-container-image:
    name: Build Files Sanity Check Container Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install script dependencies
        run: npm install --prefix ./.ci
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        run: ./.ci/fsc/buildContainerImage.js
        env:
          TAG: test
          PLATFORMS: linux/amd64
