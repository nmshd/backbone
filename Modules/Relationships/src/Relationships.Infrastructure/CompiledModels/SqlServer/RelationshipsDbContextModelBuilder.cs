// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Backbone.Modules.Relationships.Infrastructure.CompiledModels.SqlServer
{
    public partial class RelationshipsDbContextModel
    {
        partial void Initialize()
        {
            var relationship = RelationshipEntityType.Create(this);
            var relationshipChange = RelationshipChangeEntityType.Create(this);
            var relationshipChangeRequest = RelationshipChangeRequestEntityType.Create(this);
            var relationshipChangeResponse = RelationshipChangeResponseEntityType.Create(this);
            var relationshipTemplate = RelationshipTemplateEntityType.Create(this);
            var relationshipTemplateAllocation = RelationshipTemplateAllocationEntityType.Create(this);
            var relationshipCreationChange = RelationshipCreationChangeEntityType.Create(this, relationshipChange);
            var relationshipTerminationChange = RelationshipTerminationChangeEntityType.Create(this, relationshipChange);

            RelationshipEntityType.CreateForeignKey1(relationship, relationshipTemplate);
            RelationshipChangeEntityType.CreateForeignKey1(relationshipChange, relationship);
            RelationshipChangeRequestEntityType.CreateForeignKey1(relationshipChangeRequest, relationshipChange);
            RelationshipChangeResponseEntityType.CreateForeignKey1(relationshipChangeResponse, relationshipChange);
            RelationshipTemplateAllocationEntityType.CreateForeignKey1(relationshipTemplateAllocation, relationshipTemplate);

            RelationshipEntityType.CreateAnnotations(relationship);
            RelationshipChangeEntityType.CreateAnnotations(relationshipChange);
            RelationshipChangeRequestEntityType.CreateAnnotations(relationshipChangeRequest);
            RelationshipChangeResponseEntityType.CreateAnnotations(relationshipChangeResponse);
            RelationshipTemplateEntityType.CreateAnnotations(relationshipTemplate);
            RelationshipTemplateAllocationEntityType.CreateAnnotations(relationshipTemplateAllocation);
            RelationshipCreationChangeEntityType.CreateAnnotations(relationshipCreationChange);
            RelationshipTerminationChangeEntityType.CreateAnnotations(relationshipTerminationChange);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var relationship = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.Relationship")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            relationship.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var backboneModulesRelationshipsDomainEntitiesRelationshipTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.Relationship", null, relationalModel);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var fromColumnBase = new ColumnBase<ColumnMappingBase>("From", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("From", fromColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("Id", idColumnBase);
            var relationshipTemplateIdColumnBase = new ColumnBase<ColumnMappingBase>("RelationshipTemplateId", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("RelationshipTemplateId", relationshipTemplateIdColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "int", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("Status", statusColumnBase);
            var toColumnBase = new ColumnBase<ColumnMappingBase>("To", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.Columns.Add("To", toColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.Relationship", backboneModulesRelationshipsDomainEntitiesRelationshipTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase = new TableMappingBase<ColumnMappingBase>(relationship, backboneModulesRelationshipsDomainEntitiesRelationshipTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase, false);
            defaultTableMappings.Add(backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, relationship.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, relationship.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fromColumnBase, relationship.FindProperty("From")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipTemplateIdColumnBase, relationship.FindProperty("RelationshipTemplateId")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, relationship.FindProperty("Status")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)toColumnBase, relationship.FindProperty("To")!, backboneModulesRelationshipsDomainEntitiesRelationshipMappingBase);

            var tableMappings = new List<TableMapping>();
            relationship.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var relationshipsTable = new Table("Relationships", null, relationalModel);
            var idColumn = new Column("Id", "char(20)", relationshipsTable);
            relationshipsTable.Columns.Add("Id", idColumn);
            var createdAtColumn = new Column("CreatedAt", "datetime2", relationshipsTable);
            relationshipsTable.Columns.Add("CreatedAt", createdAtColumn);
            var fromColumn = new Column("From", "char(36)", relationshipsTable);
            relationshipsTable.Columns.Add("From", fromColumn);
            var relationshipTemplateIdColumn = new Column("RelationshipTemplateId", "char(20)", relationshipsTable);
            relationshipsTable.Columns.Add("RelationshipTemplateId", relationshipTemplateIdColumn);
            var statusColumn = new Column("Status", "int", relationshipsTable);
            relationshipsTable.Columns.Add("Status", statusColumn);
            var toColumn = new Column("To", "char(36)", relationshipsTable);
            relationshipsTable.Columns.Add("To", toColumn);
            var pK_Relationships = new UniqueConstraint("PK_Relationships", relationshipsTable, new[] { idColumn });
            relationshipsTable.PrimaryKey = pK_Relationships;
            var pK_RelationshipsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "Id" });
            pK_Relationships.MappedKeys.Add(pK_RelationshipsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipsUc).Add(pK_Relationships);
            relationshipsTable.UniqueConstraints.Add("PK_Relationships", pK_Relationships);
            var iX_Relationships_CreatedAt = new TableIndex(
            "IX_Relationships_CreatedAt", relationshipsTable, new[] { createdAtColumn }, false);
            var iX_Relationships_CreatedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "CreatedAt" });
            iX_Relationships_CreatedAt.MappedIndexes.Add(iX_Relationships_CreatedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Relationships_CreatedAtIx).Add(iX_Relationships_CreatedAt);
            relationshipsTable.Indexes.Add("IX_Relationships_CreatedAt", iX_Relationships_CreatedAt);
            var iX_Relationships_From = new TableIndex(
            "IX_Relationships_From", relationshipsTable, new[] { fromColumn }, false);
            var iX_Relationships_FromIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "From" });
            iX_Relationships_From.MappedIndexes.Add(iX_Relationships_FromIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Relationships_FromIx).Add(iX_Relationships_From);
            relationshipsTable.Indexes.Add("IX_Relationships_From", iX_Relationships_From);
            var iX_Relationships_RelationshipTemplateId = new TableIndex(
            "IX_Relationships_RelationshipTemplateId", relationshipsTable, new[] { relationshipTemplateIdColumn }, false);
            var iX_Relationships_RelationshipTemplateIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "RelationshipTemplateId" });
            iX_Relationships_RelationshipTemplateId.MappedIndexes.Add(iX_Relationships_RelationshipTemplateIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Relationships_RelationshipTemplateIdIx).Add(iX_Relationships_RelationshipTemplateId);
            relationshipsTable.Indexes.Add("IX_Relationships_RelationshipTemplateId", iX_Relationships_RelationshipTemplateId);
            var iX_Relationships_Status = new TableIndex(
            "IX_Relationships_Status", relationshipsTable, new[] { statusColumn }, false);
            var iX_Relationships_StatusIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "Status" });
            iX_Relationships_Status.MappedIndexes.Add(iX_Relationships_StatusIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Relationships_StatusIx).Add(iX_Relationships_Status);
            relationshipsTable.Indexes.Add("IX_Relationships_Status", iX_Relationships_Status);
            var iX_Relationships_To = new TableIndex(
            "IX_Relationships_To", relationshipsTable, new[] { toColumn }, false);
            var iX_Relationships_ToIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "To" });
            iX_Relationships_To.MappedIndexes.Add(iX_Relationships_ToIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Relationships_ToIx).Add(iX_Relationships_To);
            relationshipsTable.Indexes.Add("IX_Relationships_To", iX_Relationships_To);
            relationalModel.Tables.Add(("Relationships", null), relationshipsTable);
            var relationshipsTableMapping = new TableMapping(relationship, relationshipsTable, true);
            relationshipsTable.AddTypeMapping(relationshipsTableMapping, false);
            tableMappings.Add(relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, relationship.FindProperty("Id")!, relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn, relationship.FindProperty("CreatedAt")!, relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(fromColumn, relationship.FindProperty("From")!, relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(relationshipTemplateIdColumn, relationship.FindProperty("RelationshipTemplateId")!, relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, relationship.FindProperty("Status")!, relationshipsTableMapping);
            RelationalModel.CreateColumnMapping(toColumn, relationship.FindProperty("To")!, relationshipsTableMapping);

            var relationshipChange = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipChange")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipChange.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.RelationshipChange", null, relationalModel);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var discriminatorColumnBase = new ColumnBase<ColumnMappingBase>("Discriminator", "nvarchar(34)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("Discriminator", discriminatorColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("Id", idColumnBase0);
            var relationshipIdColumnBase = new ColumnBase<ColumnMappingBase>("RelationshipId", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("RelationshipId", relationshipIdColumnBase);
            var statusColumnBase0 = new ColumnBase<ColumnMappingBase>("Status", "int", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("Status", statusColumnBase0);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "int", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.RelationshipChange", backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipChange, backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase, false);
            defaultTableMappings0.Add(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, relationshipChange.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, relationshipChange.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discriminatorColumnBase, relationshipChange.FindProperty("Discriminator")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipIdColumnBase, relationshipChange.FindProperty("RelationshipId")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, relationshipChange.FindProperty("Status")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, relationshipChange.FindProperty("Type")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase);

            var tableMappings0 = new List<TableMapping>();
            relationshipChange.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var relationshipChangesTable = new Table("RelationshipChanges", null, relationalModel);
            var idColumn0 = new Column("Id", "nvarchar(20)", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Id", idColumn0);
            var createdAtColumn0 = new Column("CreatedAt", "datetime2", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("CreatedAt", createdAtColumn0);
            var discriminatorColumn = new Column("Discriminator", "nvarchar(34)", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Discriminator", discriminatorColumn);
            var relationshipIdColumn = new Column("RelationshipId", "char(20)", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("RelationshipId", relationshipIdColumn);
            var req_ContentColumn = new Column("Req_Content", "varbinary(max)", relationshipChangesTable)
            {
                IsNullable = true
            };
            relationshipChangesTable.Columns.Add("Req_Content", req_ContentColumn);
            var req_CreatedAtColumn = new Column("Req_CreatedAt", "datetime2", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Req_CreatedAt", req_CreatedAtColumn);
            var req_CreatedByColumn = new Column("Req_CreatedBy", "char(36)", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Req_CreatedBy", req_CreatedByColumn);
            var req_CreatedByDeviceColumn = new Column("Req_CreatedByDevice", "char(20)", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Req_CreatedByDevice", req_CreatedByDeviceColumn);
            var res_ContentColumn = new Column("Res_Content", "varbinary(max)", relationshipChangesTable)
            {
                IsNullable = true
            };
            relationshipChangesTable.Columns.Add("Res_Content", res_ContentColumn);
            var res_CreatedAtColumn = new Column("Res_CreatedAt", "datetime2", relationshipChangesTable)
            {
                IsNullable = true
            };
            relationshipChangesTable.Columns.Add("Res_CreatedAt", res_CreatedAtColumn);
            var res_CreatedByColumn = new Column("Res_CreatedBy", "char(36)", relationshipChangesTable)
            {
                IsNullable = true
            };
            relationshipChangesTable.Columns.Add("Res_CreatedBy", res_CreatedByColumn);
            var res_CreatedByDeviceColumn = new Column("Res_CreatedByDevice", "char(20)", relationshipChangesTable)
            {
                IsNullable = true
            };
            relationshipChangesTable.Columns.Add("Res_CreatedByDevice", res_CreatedByDeviceColumn);
            var statusColumn0 = new Column("Status", "int", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Status", statusColumn0);
            var typeColumn = new Column("Type", "int", relationshipChangesTable);
            relationshipChangesTable.Columns.Add("Type", typeColumn);
            var pK_RelationshipChanges = new UniqueConstraint("PK_RelationshipChanges", relationshipChangesTable, new[] { idColumn0 });
            relationshipChangesTable.PrimaryKey = pK_RelationshipChanges;
            var pK_RelationshipChangesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "Id" });
            pK_RelationshipChanges.MappedKeys.Add(pK_RelationshipChangesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipChangesUc).Add(pK_RelationshipChanges);
            var pK_RelationshipChangesUc0 = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest",
                new[] { "Id" });
            pK_RelationshipChanges.MappedKeys.Add(pK_RelationshipChangesUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipChangesUc0).Add(pK_RelationshipChanges);
            var pK_RelationshipChangesUc1 = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse",
                new[] { "Id" });
            pK_RelationshipChanges.MappedKeys.Add(pK_RelationshipChangesUc1);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipChangesUc1).Add(pK_RelationshipChanges);
            relationshipChangesTable.UniqueConstraints.Add("PK_RelationshipChanges", pK_RelationshipChanges);
            var iX_RelationshipChanges_CreatedAt = new TableIndex(
            "IX_RelationshipChanges_CreatedAt", relationshipChangesTable, new[] { createdAtColumn0 }, false);
            var iX_RelationshipChanges_CreatedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "CreatedAt" });
            iX_RelationshipChanges_CreatedAt.MappedIndexes.Add(iX_RelationshipChanges_CreatedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_CreatedAtIx).Add(iX_RelationshipChanges_CreatedAt);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_CreatedAt", iX_RelationshipChanges_CreatedAt);
            var iX_RelationshipChanges_RelationshipId = new TableIndex(
            "IX_RelationshipChanges_RelationshipId", relationshipChangesTable, new[] { relationshipIdColumn }, false);
            var iX_RelationshipChanges_RelationshipIdIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "RelationshipId" });
            iX_RelationshipChanges_RelationshipId.MappedIndexes.Add(iX_RelationshipChanges_RelationshipIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_RelationshipIdIx).Add(iX_RelationshipChanges_RelationshipId);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_RelationshipId", iX_RelationshipChanges_RelationshipId);
            var iX_RelationshipChanges_Req_CreatedAt = new TableIndex(
            "IX_RelationshipChanges_Req_CreatedAt", relationshipChangesTable, new[] { req_CreatedAtColumn }, false);
            var iX_RelationshipChanges_Req_CreatedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest",
                new[] { "CreatedAt" });
            iX_RelationshipChanges_Req_CreatedAt.MappedIndexes.Add(iX_RelationshipChanges_Req_CreatedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Req_CreatedAtIx).Add(iX_RelationshipChanges_Req_CreatedAt);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Req_CreatedAt", iX_RelationshipChanges_Req_CreatedAt);
            var iX_RelationshipChanges_Req_CreatedBy = new TableIndex(
            "IX_RelationshipChanges_Req_CreatedBy", relationshipChangesTable, new[] { req_CreatedByColumn }, false);
            var iX_RelationshipChanges_Req_CreatedByIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest",
                new[] { "CreatedBy" });
            iX_RelationshipChanges_Req_CreatedBy.MappedIndexes.Add(iX_RelationshipChanges_Req_CreatedByIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Req_CreatedByIx).Add(iX_RelationshipChanges_Req_CreatedBy);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Req_CreatedBy", iX_RelationshipChanges_Req_CreatedBy);
            var iX_RelationshipChanges_Req_CreatedByDevice = new TableIndex(
            "IX_RelationshipChanges_Req_CreatedByDevice", relationshipChangesTable, new[] { req_CreatedByDeviceColumn }, false);
            var iX_RelationshipChanges_Req_CreatedByDeviceIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest",
                new[] { "CreatedByDevice" });
            iX_RelationshipChanges_Req_CreatedByDevice.MappedIndexes.Add(iX_RelationshipChanges_Req_CreatedByDeviceIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Req_CreatedByDeviceIx).Add(iX_RelationshipChanges_Req_CreatedByDevice);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Req_CreatedByDevice", iX_RelationshipChanges_Req_CreatedByDevice);
            var iX_RelationshipChanges_Res_CreatedAt = new TableIndex(
            "IX_RelationshipChanges_Res_CreatedAt", relationshipChangesTable, new[] { res_CreatedAtColumn }, false);
            var iX_RelationshipChanges_Res_CreatedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse",
                new[] { "CreatedAt" });
            iX_RelationshipChanges_Res_CreatedAt.MappedIndexes.Add(iX_RelationshipChanges_Res_CreatedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Res_CreatedAtIx).Add(iX_RelationshipChanges_Res_CreatedAt);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Res_CreatedAt", iX_RelationshipChanges_Res_CreatedAt);
            var iX_RelationshipChanges_Res_CreatedBy = new TableIndex(
            "IX_RelationshipChanges_Res_CreatedBy", relationshipChangesTable, new[] { res_CreatedByColumn }, false);
            var iX_RelationshipChanges_Res_CreatedByIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse",
                new[] { "CreatedBy" });
            iX_RelationshipChanges_Res_CreatedBy.MappedIndexes.Add(iX_RelationshipChanges_Res_CreatedByIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Res_CreatedByIx).Add(iX_RelationshipChanges_Res_CreatedBy);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Res_CreatedBy", iX_RelationshipChanges_Res_CreatedBy);
            var iX_RelationshipChanges_Res_CreatedByDevice = new TableIndex(
            "IX_RelationshipChanges_Res_CreatedByDevice", relationshipChangesTable, new[] { res_CreatedByDeviceColumn }, false);
            var iX_RelationshipChanges_Res_CreatedByDeviceIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse",
                new[] { "CreatedByDevice" });
            iX_RelationshipChanges_Res_CreatedByDevice.MappedIndexes.Add(iX_RelationshipChanges_Res_CreatedByDeviceIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_Res_CreatedByDeviceIx).Add(iX_RelationshipChanges_Res_CreatedByDevice);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Res_CreatedByDevice", iX_RelationshipChanges_Res_CreatedByDevice);
            var iX_RelationshipChanges_Status = new TableIndex(
            "IX_RelationshipChanges_Status", relationshipChangesTable, new[] { statusColumn0 }, false);
            var iX_RelationshipChanges_StatusIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "Status" });
            iX_RelationshipChanges_Status.MappedIndexes.Add(iX_RelationshipChanges_StatusIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_StatusIx).Add(iX_RelationshipChanges_Status);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Status", iX_RelationshipChanges_Status);
            var iX_RelationshipChanges_Type = new TableIndex(
            "IX_RelationshipChanges_Type", relationshipChangesTable, new[] { typeColumn }, false);
            var iX_RelationshipChanges_TypeIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "Type" });
            iX_RelationshipChanges_Type.MappedIndexes.Add(iX_RelationshipChanges_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipChanges_TypeIx).Add(iX_RelationshipChanges_Type);
            relationshipChangesTable.Indexes.Add("IX_RelationshipChanges_Type", iX_RelationshipChanges_Type);
            relationalModel.Tables.Add(("RelationshipChanges", null), relationshipChangesTable);
            var relationshipChangesTableMapping = new TableMapping(relationshipChange, relationshipChangesTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            relationshipChangesTable.AddTypeMapping(relationshipChangesTableMapping, false);
            tableMappings0.Add(relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, relationshipChange.FindProperty("Id")!, relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn0, relationshipChange.FindProperty("CreatedAt")!, relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(discriminatorColumn, relationshipChange.FindProperty("Discriminator")!, relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(relationshipIdColumn, relationshipChange.FindProperty("RelationshipId")!, relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn0, relationshipChange.FindProperty("Status")!, relationshipChangesTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, relationshipChange.FindProperty("Type")!, relationshipChangesTableMapping);

            var relationshipChangeRequest = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipChangeRequest.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.Columns.Add("Id", idColumnBase1);
            var req_ContentColumnBase = new ColumnBase<ColumnMappingBase>("Req_Content", "varbinary(max)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.Columns.Add("Req_Content", req_ContentColumnBase);
            var req_CreatedAtColumnBase = new ColumnBase<ColumnMappingBase>("Req_CreatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.Columns.Add("Req_CreatedAt", req_CreatedAtColumnBase);
            var req_CreatedByColumnBase = new ColumnBase<ColumnMappingBase>("Req_CreatedBy", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.Columns.Add("Req_CreatedBy", req_CreatedByColumnBase);
            var req_CreatedByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("Req_CreatedByDevice", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.Columns.Add("Req_CreatedByDevice", req_CreatedByDeviceColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest", backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipChangeRequest, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase, false);
            defaultTableMappings1.Add(backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, relationshipChangeRequest.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)req_ContentColumnBase, relationshipChangeRequest.FindProperty("Content")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)req_CreatedAtColumnBase, relationshipChangeRequest.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)req_CreatedByColumnBase, relationshipChangeRequest.FindProperty("CreatedBy")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)req_CreatedByDeviceColumnBase, relationshipChangeRequest.FindProperty("CreatedByDevice")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeRequestMappingBase);

            var tableMappings1 = new List<TableMapping>();
            relationshipChangeRequest.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var relationshipChangesTableMapping0 = new TableMapping(relationshipChangeRequest, relationshipChangesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            relationshipChangesTable.AddTypeMapping(relationshipChangesTableMapping0, false);
            tableMappings1.Add(relationshipChangesTableMapping0);
            relationshipChangesTable.AddRowInternalForeignKey(relationshipChangeRequest, RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeRequest",
                new[] { "Id" },
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn0, relationshipChangeRequest.FindProperty("Id")!, relationshipChangesTableMapping0);
            RelationalModel.CreateColumnMapping(req_ContentColumn, relationshipChangeRequest.FindProperty("Content")!, relationshipChangesTableMapping0);
            RelationalModel.CreateColumnMapping(req_CreatedAtColumn, relationshipChangeRequest.FindProperty("CreatedAt")!, relationshipChangesTableMapping0);
            RelationalModel.CreateColumnMapping(req_CreatedByColumn, relationshipChangeRequest.FindProperty("CreatedBy")!, relationshipChangesTableMapping0);
            RelationalModel.CreateColumnMapping(req_CreatedByDeviceColumn, relationshipChangeRequest.FindProperty("CreatedByDevice")!, relationshipChangesTableMapping0);

            var relationshipChangeResponse = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipChangeResponse.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse", null, relationalModel);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.Columns.Add("Id", idColumnBase2);
            var res_ContentColumnBase = new ColumnBase<ColumnMappingBase>("Res_Content", "varbinary(max)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.Columns.Add("Res_Content", res_ContentColumnBase);
            var res_CreatedAtColumnBase = new ColumnBase<ColumnMappingBase>("Res_CreatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.Columns.Add("Res_CreatedAt", res_CreatedAtColumnBase);
            var res_CreatedByColumnBase = new ColumnBase<ColumnMappingBase>("Res_CreatedBy", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.Columns.Add("Res_CreatedBy", res_CreatedByColumnBase);
            var res_CreatedByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("Res_CreatedByDevice", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.Columns.Add("Res_CreatedByDevice", res_CreatedByDeviceColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse", backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipChangeResponse, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase, false);
            defaultTableMappings2.Add(backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, relationshipChangeResponse.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)res_ContentColumnBase, relationshipChangeResponse.FindProperty("Content")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)res_CreatedAtColumnBase, relationshipChangeResponse.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)res_CreatedByColumnBase, relationshipChangeResponse.FindProperty("CreatedBy")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)res_CreatedByDeviceColumnBase, relationshipChangeResponse.FindProperty("CreatedByDevice")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeResponseMappingBase);

            var tableMappings2 = new List<TableMapping>();
            relationshipChangeResponse.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var relationshipChangesTableMapping1 = new TableMapping(relationshipChangeResponse, relationshipChangesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            relationshipChangesTable.AddTypeMapping(relationshipChangesTableMapping1, true);
            tableMappings2.Add(relationshipChangesTableMapping1);
            relationshipChangesTable.AddRowInternalForeignKey(relationshipChangeResponse, RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChangeResponse",
                new[] { "Id" },
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn0, relationshipChangeResponse.FindProperty("Id")!, relationshipChangesTableMapping1);
            RelationalModel.CreateColumnMapping(res_ContentColumn, relationshipChangeResponse.FindProperty("Content")!, relationshipChangesTableMapping1);
            RelationalModel.CreateColumnMapping(res_CreatedAtColumn, relationshipChangeResponse.FindProperty("CreatedAt")!, relationshipChangesTableMapping1);
            RelationalModel.CreateColumnMapping(res_CreatedByColumn, relationshipChangeResponse.FindProperty("CreatedBy")!, relationshipChangesTableMapping1);
            RelationalModel.CreateColumnMapping(res_CreatedByDeviceColumn, relationshipChangeResponse.FindProperty("CreatedByDevice")!, relationshipChangesTableMapping1);

            var relationshipCreationChange = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipCreationChange")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipCreationChange.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0 = new TableMappingBase<ColumnMappingBase>(relationshipCreationChange, backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0, false);
            defaultTableMappings3.Add(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, relationshipCreationChange.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, relationshipCreationChange.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discriminatorColumnBase, relationshipCreationChange.FindProperty("Discriminator")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipIdColumnBase, relationshipCreationChange.FindProperty("RelationshipId")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, relationshipCreationChange.FindProperty("Status")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, relationshipCreationChange.FindProperty("Type")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase0);

            var tableMappings3 = new List<TableMapping>();
            relationshipCreationChange.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var relationshipChangesTableMapping2 = new TableMapping(relationshipCreationChange, relationshipChangesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            relationshipChangesTable.AddTypeMapping(relationshipChangesTableMapping2, false);
            tableMappings3.Add(relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(idColumn0, relationshipCreationChange.FindProperty("Id")!, relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(createdAtColumn0, relationshipCreationChange.FindProperty("CreatedAt")!, relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(discriminatorColumn, relationshipCreationChange.FindProperty("Discriminator")!, relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(relationshipIdColumn, relationshipCreationChange.FindProperty("RelationshipId")!, relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(statusColumn0, relationshipCreationChange.FindProperty("Status")!, relationshipChangesTableMapping2);
            RelationalModel.CreateColumnMapping(typeColumn, relationshipCreationChange.FindProperty("Type")!, relationshipChangesTableMapping2);

            var relationshipTemplate = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipTemplate.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate", null, relationalModel);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "varbinary(max)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("Content", contentColumnBase);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var createdByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("CreatedByDevice", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("CreatedByDevice", createdByDeviceColumnBase);
            var deletedAtColumnBase = new ColumnBase<ColumnMappingBase>("DeletedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("DeletedAt", deletedAtColumnBase);
            var expiresAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpiresAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("ExpiresAt", expiresAtColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("Id", idColumnBase3);
            var maxNumberOfAllocationsColumnBase = new ColumnBase<ColumnMappingBase>("MaxNumberOfAllocations", "int", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase)
            {
                IsNullable = true
            };
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.Columns.Add("MaxNumberOfAllocations", maxNumberOfAllocationsColumnBase);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipTemplate, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase, false);
            defaultTableMappings4.Add(backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, relationshipTemplate.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, relationshipTemplate.FindProperty("Content")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, relationshipTemplate.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, relationshipTemplate.FindProperty("CreatedBy")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByDeviceColumnBase, relationshipTemplate.FindProperty("CreatedByDevice")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase, relationshipTemplate.FindProperty("DeletedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresAtColumnBase, relationshipTemplate.FindProperty("ExpiresAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxNumberOfAllocationsColumnBase, relationshipTemplate.FindProperty("MaxNumberOfAllocations")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateMappingBase);

            var tableMappings4 = new List<TableMapping>();
            relationshipTemplate.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var relationshipTemplatesTable = new Table("RelationshipTemplates", null, relationalModel);
            var idColumn1 = new Column("Id", "char(20)", relationshipTemplatesTable);
            relationshipTemplatesTable.Columns.Add("Id", idColumn1);
            var contentColumn = new Column("Content", "varbinary(max)", relationshipTemplatesTable)
            {
                IsNullable = true
            };
            relationshipTemplatesTable.Columns.Add("Content", contentColumn);
            var createdAtColumn1 = new Column("CreatedAt", "datetime2", relationshipTemplatesTable);
            relationshipTemplatesTable.Columns.Add("CreatedAt", createdAtColumn1);
            var createdByColumn = new Column("CreatedBy", "char(36)", relationshipTemplatesTable);
            relationshipTemplatesTable.Columns.Add("CreatedBy", createdByColumn);
            var createdByDeviceColumn = new Column("CreatedByDevice", "char(20)", relationshipTemplatesTable);
            relationshipTemplatesTable.Columns.Add("CreatedByDevice", createdByDeviceColumn);
            var deletedAtColumn = new Column("DeletedAt", "datetime2", relationshipTemplatesTable)
            {
                IsNullable = true
            };
            relationshipTemplatesTable.Columns.Add("DeletedAt", deletedAtColumn);
            var expiresAtColumn = new Column("ExpiresAt", "datetime2", relationshipTemplatesTable)
            {
                IsNullable = true
            };
            relationshipTemplatesTable.Columns.Add("ExpiresAt", expiresAtColumn);
            var maxNumberOfAllocationsColumn = new Column("MaxNumberOfAllocations", "int", relationshipTemplatesTable)
            {
                IsNullable = true
            };
            relationshipTemplatesTable.Columns.Add("MaxNumberOfAllocations", maxNumberOfAllocationsColumn);
            var pK_RelationshipTemplates = new UniqueConstraint("PK_RelationshipTemplates", relationshipTemplatesTable, new[] { idColumn1 });
            relationshipTemplatesTable.PrimaryKey = pK_RelationshipTemplates;
            var pK_RelationshipTemplatesUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "Id" });
            pK_RelationshipTemplates.MappedKeys.Add(pK_RelationshipTemplatesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipTemplatesUc).Add(pK_RelationshipTemplates);
            relationshipTemplatesTable.UniqueConstraints.Add("PK_RelationshipTemplates", pK_RelationshipTemplates);
            var iX_RelationshipTemplates_CreatedBy = new TableIndex(
            "IX_RelationshipTemplates_CreatedBy", relationshipTemplatesTable, new[] { createdByColumn }, false);
            var iX_RelationshipTemplates_CreatedByIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "CreatedBy" });
            iX_RelationshipTemplates_CreatedBy.MappedIndexes.Add(iX_RelationshipTemplates_CreatedByIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipTemplates_CreatedByIx).Add(iX_RelationshipTemplates_CreatedBy);
            relationshipTemplatesTable.Indexes.Add("IX_RelationshipTemplates_CreatedBy", iX_RelationshipTemplates_CreatedBy);
            var iX_RelationshipTemplates_DeletedAt = new TableIndex(
            "IX_RelationshipTemplates_DeletedAt", relationshipTemplatesTable, new[] { deletedAtColumn }, false);
            var iX_RelationshipTemplates_DeletedAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "DeletedAt" });
            iX_RelationshipTemplates_DeletedAt.MappedIndexes.Add(iX_RelationshipTemplates_DeletedAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipTemplates_DeletedAtIx).Add(iX_RelationshipTemplates_DeletedAt);
            relationshipTemplatesTable.Indexes.Add("IX_RelationshipTemplates_DeletedAt", iX_RelationshipTemplates_DeletedAt);
            var iX_RelationshipTemplates_ExpiresAt = new TableIndex(
            "IX_RelationshipTemplates_ExpiresAt", relationshipTemplatesTable, new[] { expiresAtColumn }, false);
            var iX_RelationshipTemplates_ExpiresAtIx = RelationalModel.GetIndex(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "ExpiresAt" });
            iX_RelationshipTemplates_ExpiresAt.MappedIndexes.Add(iX_RelationshipTemplates_ExpiresAtIx);
            RelationalModel.GetOrCreateTableIndexes(iX_RelationshipTemplates_ExpiresAtIx).Add(iX_RelationshipTemplates_ExpiresAt);
            relationshipTemplatesTable.Indexes.Add("IX_RelationshipTemplates_ExpiresAt", iX_RelationshipTemplates_ExpiresAt);
            relationalModel.Tables.Add(("RelationshipTemplates", null), relationshipTemplatesTable);
            var relationshipTemplatesTableMapping = new TableMapping(relationshipTemplate, relationshipTemplatesTable, true);
            relationshipTemplatesTable.AddTypeMapping(relationshipTemplatesTableMapping, false);
            tableMappings4.Add(relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, relationshipTemplate.FindProperty("Id")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, relationshipTemplate.FindProperty("Content")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(createdAtColumn1, relationshipTemplate.FindProperty("CreatedAt")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, relationshipTemplate.FindProperty("CreatedBy")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(createdByDeviceColumn, relationshipTemplate.FindProperty("CreatedByDevice")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn, relationshipTemplate.FindProperty("DeletedAt")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(expiresAtColumn, relationshipTemplate.FindProperty("ExpiresAt")!, relationshipTemplatesTableMapping);
            RelationalModel.CreateColumnMapping(maxNumberOfAllocationsColumn, relationshipTemplate.FindProperty("MaxNumberOfAllocations")!, relationshipTemplatesTableMapping);

            var relationshipTemplateAllocation = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplateAllocation")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipTemplateAllocation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase = new TableBase("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplateAllocation", null, relationalModel);
            var allocatedAtColumnBase = new ColumnBase<ColumnMappingBase>("AllocatedAt", "datetime2", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase.Columns.Add("AllocatedAt", allocatedAtColumnBase);
            var allocatedByColumnBase = new ColumnBase<ColumnMappingBase>("AllocatedBy", "char(36)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase.Columns.Add("AllocatedBy", allocatedByColumnBase);
            var allocatedByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("AllocatedByDevice", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase.Columns.Add("AllocatedByDevice", allocatedByDeviceColumnBase);
            var relationshipTemplateIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RelationshipTemplateId", "char(20)", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase.Columns.Add("RelationshipTemplateId", relationshipTemplateIdColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplateAllocation", backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase);
            var backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipTemplateAllocation, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase, false);
            defaultTableMappings5.Add(backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allocatedByColumnBase, relationshipTemplateAllocation.FindProperty("AllocatedBy")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipTemplateIdColumnBase0, relationshipTemplateAllocation.FindProperty("RelationshipTemplateId")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allocatedAtColumnBase, relationshipTemplateAllocation.FindProperty("AllocatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)allocatedByDeviceColumnBase, relationshipTemplateAllocation.FindProperty("AllocatedByDevice")!, backboneModulesRelationshipsDomainEntitiesRelationshipTemplateAllocationMappingBase);

            var tableMappings5 = new List<TableMapping>();
            relationshipTemplateAllocation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var relationshipTemplateAllocationsTable = new Table("RelationshipTemplateAllocations", null, relationalModel);
            var relationshipTemplateIdColumn0 = new Column("RelationshipTemplateId", "char(20)", relationshipTemplateAllocationsTable);
            relationshipTemplateAllocationsTable.Columns.Add("RelationshipTemplateId", relationshipTemplateIdColumn0);
            var allocatedByColumn = new Column("AllocatedBy", "char(36)", relationshipTemplateAllocationsTable);
            relationshipTemplateAllocationsTable.Columns.Add("AllocatedBy", allocatedByColumn);
            var allocatedAtColumn = new Column("AllocatedAt", "datetime2", relationshipTemplateAllocationsTable);
            relationshipTemplateAllocationsTable.Columns.Add("AllocatedAt", allocatedAtColumn);
            var allocatedByDeviceColumn = new Column("AllocatedByDevice", "char(20)", relationshipTemplateAllocationsTable);
            relationshipTemplateAllocationsTable.Columns.Add("AllocatedByDevice", allocatedByDeviceColumn);
            var pK_RelationshipTemplateAllocations = new UniqueConstraint("PK_RelationshipTemplateAllocations", relationshipTemplateAllocationsTable, new[] { relationshipTemplateIdColumn0, allocatedByColumn });
            relationshipTemplateAllocationsTable.PrimaryKey = pK_RelationshipTemplateAllocations;
            var pK_RelationshipTemplateAllocationsUc = RelationalModel.GetKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplateAllocation",
                new[] { "RelationshipTemplateId", "AllocatedBy" });
            pK_RelationshipTemplateAllocations.MappedKeys.Add(pK_RelationshipTemplateAllocationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_RelationshipTemplateAllocationsUc).Add(pK_RelationshipTemplateAllocations);
            relationshipTemplateAllocationsTable.UniqueConstraints.Add("PK_RelationshipTemplateAllocations", pK_RelationshipTemplateAllocations);
            relationalModel.Tables.Add(("RelationshipTemplateAllocations", null), relationshipTemplateAllocationsTable);
            var relationshipTemplateAllocationsTableMapping = new TableMapping(relationshipTemplateAllocation, relationshipTemplateAllocationsTable, true);
            relationshipTemplateAllocationsTable.AddTypeMapping(relationshipTemplateAllocationsTableMapping, false);
            tableMappings5.Add(relationshipTemplateAllocationsTableMapping);
            RelationalModel.CreateColumnMapping(allocatedByColumn, relationshipTemplateAllocation.FindProperty("AllocatedBy")!, relationshipTemplateAllocationsTableMapping);
            RelationalModel.CreateColumnMapping(relationshipTemplateIdColumn0, relationshipTemplateAllocation.FindProperty("RelationshipTemplateId")!, relationshipTemplateAllocationsTableMapping);
            RelationalModel.CreateColumnMapping(allocatedAtColumn, relationshipTemplateAllocation.FindProperty("AllocatedAt")!, relationshipTemplateAllocationsTableMapping);
            RelationalModel.CreateColumnMapping(allocatedByDeviceColumn, relationshipTemplateAllocation.FindProperty("AllocatedByDevice")!, relationshipTemplateAllocationsTableMapping);

            var relationshipTerminationChange = FindEntityType("Backbone.Modules.Relationships.Domain.Entities.RelationshipTerminationChange")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipTerminationChange.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1 = new TableMappingBase<ColumnMappingBase>(relationshipTerminationChange, backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase, true);
            backboneModulesRelationshipsDomainEntitiesRelationshipChangeTableBase.AddTypeMapping(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1, false);
            defaultTableMappings6.Add(backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, relationshipTerminationChange.FindProperty("Id")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, relationshipTerminationChange.FindProperty("CreatedAt")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discriminatorColumnBase, relationshipTerminationChange.FindProperty("Discriminator")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipIdColumnBase, relationshipTerminationChange.FindProperty("RelationshipId")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase0, relationshipTerminationChange.FindProperty("Status")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, relationshipTerminationChange.FindProperty("Type")!, backboneModulesRelationshipsDomainEntitiesRelationshipChangeMappingBase1);

            var tableMappings6 = new List<TableMapping>();
            relationshipTerminationChange.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var relationshipChangesTableMapping3 = new TableMapping(relationshipTerminationChange, relationshipChangesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            relationshipChangesTable.AddTypeMapping(relationshipChangesTableMapping3, false);
            tableMappings6.Add(relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(idColumn0, relationshipTerminationChange.FindProperty("Id")!, relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(createdAtColumn0, relationshipTerminationChange.FindProperty("CreatedAt")!, relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(discriminatorColumn, relationshipTerminationChange.FindProperty("Discriminator")!, relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(relationshipIdColumn, relationshipTerminationChange.FindProperty("RelationshipId")!, relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(statusColumn0, relationshipTerminationChange.FindProperty("Status")!, relationshipChangesTableMapping3);
            RelationalModel.CreateColumnMapping(typeColumn, relationshipTerminationChange.FindProperty("Type")!, relationshipChangesTableMapping3);
            var fK_RelationshipChanges_Relationships_RelationshipId = new ForeignKeyConstraint(
                "FK_RelationshipChanges_Relationships_RelationshipId", relationshipChangesTable, relationshipsTable,
                new[] { relationshipIdColumn },
                relationshipsTable.FindUniqueConstraint("PK_Relationships")!, ReferentialAction.Cascade);
            var fK_RelationshipChanges_Relationships_RelationshipIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipChange",
                new[] { "RelationshipId" },
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "Id" });
            fK_RelationshipChanges_Relationships_RelationshipId.MappedForeignKeys.Add(fK_RelationshipChanges_Relationships_RelationshipIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RelationshipChanges_Relationships_RelationshipIdFk).Add(fK_RelationshipChanges_Relationships_RelationshipId);
            relationshipChangesTable.ForeignKeyConstraints.Add(fK_RelationshipChanges_Relationships_RelationshipId);
            relationshipsTable.ReferencingForeignKeyConstraints.Add(fK_RelationshipChanges_Relationships_RelationshipId);
            var fK_Relationships_RelationshipTemplates_RelationshipTemplateId = new ForeignKeyConstraint(
                "FK_Relationships_RelationshipTemplates_RelationshipTemplateId", relationshipsTable, relationshipTemplatesTable,
                new[] { relationshipTemplateIdColumn },
                relationshipTemplatesTable.FindUniqueConstraint("PK_RelationshipTemplates")!, ReferentialAction.Restrict);
            var fK_Relationships_RelationshipTemplates_RelationshipTemplateIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.Relationship",
                new[] { "RelationshipTemplateId" },
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "Id" });
            fK_Relationships_RelationshipTemplates_RelationshipTemplateId.MappedForeignKeys.Add(fK_Relationships_RelationshipTemplates_RelationshipTemplateIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Relationships_RelationshipTemplates_RelationshipTemplateIdFk).Add(fK_Relationships_RelationshipTemplates_RelationshipTemplateId);
            relationshipsTable.ForeignKeyConstraints.Add(fK_Relationships_RelationshipTemplates_RelationshipTemplateId);
            relationshipTemplatesTable.ReferencingForeignKeyConstraints.Add(fK_Relationships_RelationshipTemplates_RelationshipTemplateId);
            var fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId = new ForeignKeyConstraint(
                "FK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId", relationshipTemplateAllocationsTable, relationshipTemplatesTable,
                new[] { relationshipTemplateIdColumn0 },
                relationshipTemplatesTable.FindUniqueConstraint("PK_RelationshipTemplates")!, ReferentialAction.Cascade);
            var fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateIdFk = RelationalModel.GetForeignKey(this,
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplateAllocation",
                new[] { "RelationshipTemplateId" },
                "Backbone.Modules.Relationships.Domain.Entities.RelationshipTemplate",
                new[] { "Id" });
            fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId.MappedForeignKeys.Add(fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateIdFk).Add(fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId);
            relationshipTemplateAllocationsTable.ForeignKeyConstraints.Add(fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId);
            relationshipTemplatesTable.ReferencingForeignKeyConstraints.Add(fK_RelationshipTemplateAllocations_RelationshipTemplates_RelationshipTemplateId);
            return relationalModel.MakeReadOnly();
        }
    }
}
