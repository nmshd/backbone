// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace AdminUi.Infrastructure.CompiledModels.SqlServer
{
    public partial class AdminUiDbContextModel
    {
        partial void Initialize()
        {
            var clientOverview = ClientOverviewEntityType.Create(this);
            var tierDTO = TierDTOEntityType.Create(this);
            var identityOverview = IdentityOverviewEntityType.Create(this);
            var tierDTO0 = TierDTO0EntityType.Create(this);
            var messageOverview = MessageOverviewEntityType.Create(this);
            var messageRecipient = MessageRecipientEntityType.Create(this);
            var relationshipOverview = RelationshipOverviewEntityType.Create(this);
            var tierOverview = TierOverviewEntityType.Create(this);

            TierDTOEntityType.CreateForeignKey1(tierDTO, clientOverview);
            TierDTO0EntityType.CreateForeignKey1(tierDTO0, identityOverview);
            MessageRecipientEntityType.CreateForeignKey1(messageRecipient, messageOverview);

            ClientOverviewEntityType.CreateAnnotations(clientOverview);
            TierDTOEntityType.CreateAnnotations(tierDTO);
            IdentityOverviewEntityType.CreateAnnotations(identityOverview);
            TierDTO0EntityType.CreateAnnotations(tierDTO0);
            MessageOverviewEntityType.CreateAnnotations(messageOverview);
            MessageRecipientEntityType.CreateAnnotations(messageRecipient);
            RelationshipOverviewEntityType.CreateAnnotations(relationshipOverview);
            TierOverviewEntityType.CreateAnnotations(tierOverview);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var clientOverview = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            clientOverview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var backboneAdminUiInfrastructureDTOsClientOverviewTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview", null, relationalModel);
            var clientIdColumnBase = new ColumnBase<ColumnMappingBase>("ClientId", "nvarchar(450)", backboneAdminUiInfrastructureDTOsClientOverviewTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.Columns.Add("ClientId", clientIdColumnBase);
            var createdAtColumnBase = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneAdminUiInfrastructureDTOsClientOverviewTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.Columns.Add("CreatedAt", createdAtColumnBase);
            var displayNameColumnBase = new ColumnBase<ColumnMappingBase>("DisplayName", "nvarchar(max)", backboneAdminUiInfrastructureDTOsClientOverviewTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.Columns.Add("DisplayName", displayNameColumnBase);
            var maxIdentitiesColumnBase = new ColumnBase<ColumnMappingBase>("MaxIdentities", "int", backboneAdminUiInfrastructureDTOsClientOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.Columns.Add("MaxIdentities", maxIdentitiesColumnBase);
            var numberOfIdentitiesColumnBase = new ColumnBase<ColumnMappingBase>("NumberOfIdentities", "int", backboneAdminUiInfrastructureDTOsClientOverviewTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.Columns.Add("NumberOfIdentities", numberOfIdentitiesColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview", backboneAdminUiInfrastructureDTOsClientOverviewTableBase);
            var backboneAdminUiInfrastructureDTOsClientOverviewMappingBase = new TableMappingBase<ColumnMappingBase>(clientOverview, backboneAdminUiInfrastructureDTOsClientOverviewTableBase, true);
            backboneAdminUiInfrastructureDTOsClientOverviewTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsClientOverviewMappingBase, false);
            defaultTableMappings.Add(backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase, clientOverview.FindProperty("ClientId")!, backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase, clientOverview.FindProperty("CreatedAt")!, backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)displayNameColumnBase, clientOverview.FindProperty("DisplayName")!, backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)maxIdentitiesColumnBase, clientOverview.FindProperty("MaxIdentities")!, backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberOfIdentitiesColumnBase, clientOverview.FindProperty("NumberOfIdentities")!, backboneAdminUiInfrastructureDTOsClientOverviewMappingBase);

            var viewMappings = new List<ViewMapping>();
            clientOverview.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings);
            var clientOverviewsView = new View("ClientOverviews", null, relationalModel);
            var clientIdViewColumn = new ViewColumn("ClientId", "nvarchar(450)", clientOverviewsView);
            clientOverviewsView.Columns.Add("ClientId", clientIdViewColumn);
            var createdAtViewColumn = new ViewColumn("CreatedAt", "datetime2", clientOverviewsView);
            clientOverviewsView.Columns.Add("CreatedAt", createdAtViewColumn);
            var defaultTierIdViewColumn = new ViewColumn("DefaultTierId", "nvarchar(max)", clientOverviewsView);
            clientOverviewsView.Columns.Add("DefaultTierId", defaultTierIdViewColumn);
            var defaultTierNameViewColumn = new ViewColumn("DefaultTierName", "nvarchar(max)", clientOverviewsView);
            clientOverviewsView.Columns.Add("DefaultTierName", defaultTierNameViewColumn);
            var displayNameViewColumn = new ViewColumn("DisplayName", "nvarchar(max)", clientOverviewsView);
            clientOverviewsView.Columns.Add("DisplayName", displayNameViewColumn);
            var maxIdentitiesViewColumn = new ViewColumn("MaxIdentities", "int", clientOverviewsView)
            {
                IsNullable = true
            };
            clientOverviewsView.Columns.Add("MaxIdentities", maxIdentitiesViewColumn);
            var numberOfIdentitiesViewColumn = new ViewColumn("NumberOfIdentities", "int", clientOverviewsView);
            clientOverviewsView.Columns.Add("NumberOfIdentities", numberOfIdentitiesViewColumn);
            relationalModel.Views.Add(("ClientOverviews", null), clientOverviewsView);
            var clientOverviewsViewMapping = new ViewMapping(clientOverview, clientOverviewsView, true)
            {
                IsSharedTablePrincipal = true,
            };
            clientOverviewsView.AddTypeMapping(clientOverviewsViewMapping, false);
            viewMappings.Add(clientOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(clientIdViewColumn, clientOverview.FindProperty("ClientId")!, clientOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(createdAtViewColumn, clientOverview.FindProperty("CreatedAt")!, clientOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(displayNameViewColumn, clientOverview.FindProperty("DisplayName")!, clientOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(maxIdentitiesViewColumn, clientOverview.FindProperty("MaxIdentities")!, clientOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(numberOfIdentitiesViewColumn, clientOverview.FindProperty("NumberOfIdentities")!, clientOverviewsViewMapping);

            var tierDTO = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview.DefaultTier#TierDTO")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            tierDTO.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview.DefaultTier#TierDTO", null, relationalModel);
            var clientOverviewClientIdColumnBase = new ColumnBase<ColumnMappingBase>("ClientOverviewClientId", "nvarchar(450)", backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase.Columns.Add("ClientOverviewClientId", clientOverviewClientIdColumnBase);
            var defaultTierIdColumnBase = new ColumnBase<ColumnMappingBase>("DefaultTierId", "nvarchar(max)", backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase.Columns.Add("DefaultTierId", defaultTierIdColumnBase);
            var defaultTierNameColumnBase = new ColumnBase<ColumnMappingBase>("DefaultTierName", "nvarchar(max)", backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase.Columns.Add("DefaultTierName", defaultTierNameColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.ClientOverview.DefaultTier#TierDTO", backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase);
            var backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase = new TableMappingBase<ColumnMappingBase>(tierDTO, backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase, true);
            backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase, false);
            defaultTableMappings0.Add(backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientOverviewClientIdColumnBase, tierDTO.FindProperty("ClientOverviewClientId")!, backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)defaultTierIdColumnBase, tierDTO.FindProperty("Id")!, backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)defaultTierNameColumnBase, tierDTO.FindProperty("Name")!, backboneAdminUiInfrastructureDTOsClientOverviewDefaultTierTierDTOMappingBase);

            var viewMappings0 = new List<ViewMapping>();
            tierDTO.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings0);
            var clientOverviewsViewMapping0 = new ViewMapping(tierDTO, clientOverviewsView, true)
            {
                IsSharedTablePrincipal = false,
            };
            clientOverviewsView.AddTypeMapping(clientOverviewsViewMapping0, false);
            viewMappings0.Add(clientOverviewsViewMapping0);
            clientOverviewsView.AddRowInternalForeignKey(tierDTO, RelationalModel.GetForeignKey(this,
                "Backbone.AdminUi.Infrastructure.DTOs.ClientOverview.DefaultTier#TierDTO",
                new[] { "ClientOverviewClientId" },
                "Backbone.AdminUi.Infrastructure.DTOs.ClientOverview",
                new[] { "ClientId" }));
            RelationalModel.CreateViewColumnMapping(clientIdViewColumn, tierDTO.FindProperty("ClientOverviewClientId")!, clientOverviewsViewMapping0);
            RelationalModel.CreateViewColumnMapping(defaultTierIdViewColumn, tierDTO.FindProperty("Id")!, clientOverviewsViewMapping0);
            RelationalModel.CreateViewColumnMapping(defaultTierNameViewColumn, tierDTO.FindProperty("Name")!, clientOverviewsViewMapping0);

            var identityOverview = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityOverview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview", null, relationalModel);
            var addressColumnBase = new ColumnBase<ColumnMappingBase>("Address", "nvarchar(450)", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("Address", addressColumnBase);
            var createdAtColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("CreatedAt", createdAtColumnBase0);
            var createdWithClientColumnBase = new ColumnBase<ColumnMappingBase>("CreatedWithClient", "nvarchar(max)", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("CreatedWithClient", createdWithClientColumnBase);
            var datawalletVersionColumnBase = new ColumnBase<ColumnMappingBase>("DatawalletVersion", "int", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("DatawalletVersion", datawalletVersionColumnBase);
            var identityVersionColumnBase = new ColumnBase<ColumnMappingBase>("IdentityVersion", "tinyint", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("IdentityVersion", identityVersionColumnBase);
            var lastLoginAtColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginAt", "datetime2", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("LastLoginAt", lastLoginAtColumnBase);
            var numberOfDevicesColumnBase = new ColumnBase<ColumnMappingBase>("NumberOfDevices", "int", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.Columns.Add("NumberOfDevices", numberOfDevicesColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview", backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase);
            var backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase = new TableMappingBase<ColumnMappingBase>(identityOverview, backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase, true);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase, false);
            defaultTableMappings1.Add(backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase, identityOverview.FindProperty("Address")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase0, identityOverview.FindProperty("CreatedAt")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdWithClientColumnBase, identityOverview.FindProperty("CreatedWithClient")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)datawalletVersionColumnBase, identityOverview.FindProperty("DatawalletVersion")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityVersionColumnBase, identityOverview.FindProperty("IdentityVersion")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginAtColumnBase, identityOverview.FindProperty("LastLoginAt")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberOfDevicesColumnBase, identityOverview.FindProperty("NumberOfDevices")!, backboneAdminUiInfrastructureDTOsIdentityOverviewMappingBase);

            var viewMappings1 = new List<ViewMapping>();
            identityOverview.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings1);
            var identityOverviewsView = new View("IdentityOverviews", null, relationalModel);
            var addressViewColumn = new ViewColumn("Address", "nvarchar(450)", identityOverviewsView);
            identityOverviewsView.Columns.Add("Address", addressViewColumn);
            var createdAtViewColumn0 = new ViewColumn("CreatedAt", "datetime2", identityOverviewsView);
            identityOverviewsView.Columns.Add("CreatedAt", createdAtViewColumn0);
            var createdWithClientViewColumn = new ViewColumn("CreatedWithClient", "nvarchar(max)", identityOverviewsView)
            {
                IsNullable = true
            };
            identityOverviewsView.Columns.Add("CreatedWithClient", createdWithClientViewColumn);
            var datawalletVersionViewColumn = new ViewColumn("DatawalletVersion", "int", identityOverviewsView)
            {
                IsNullable = true
            };
            identityOverviewsView.Columns.Add("DatawalletVersion", datawalletVersionViewColumn);
            var identityVersionViewColumn = new ViewColumn("IdentityVersion", "tinyint", identityOverviewsView);
            identityOverviewsView.Columns.Add("IdentityVersion", identityVersionViewColumn);
            var lastLoginAtViewColumn = new ViewColumn("LastLoginAt", "datetime2", identityOverviewsView)
            {
                IsNullable = true
            };
            identityOverviewsView.Columns.Add("LastLoginAt", lastLoginAtViewColumn);
            var numberOfDevicesViewColumn = new ViewColumn("NumberOfDevices", "int", identityOverviewsView)
            {
                IsNullable = true
            };
            identityOverviewsView.Columns.Add("NumberOfDevices", numberOfDevicesViewColumn);
            var tierIdViewColumn = new ViewColumn("TierId", "nvarchar(max)", identityOverviewsView);
            identityOverviewsView.Columns.Add("TierId", tierIdViewColumn);
            var tierNameViewColumn = new ViewColumn("TierName", "nvarchar(max)", identityOverviewsView);
            identityOverviewsView.Columns.Add("TierName", tierNameViewColumn);
            relationalModel.Views.Add(("IdentityOverviews", null), identityOverviewsView);
            var identityOverviewsViewMapping = new ViewMapping(identityOverview, identityOverviewsView, true)
            {
                IsSharedTablePrincipal = true,
            };
            identityOverviewsView.AddTypeMapping(identityOverviewsViewMapping, false);
            viewMappings1.Add(identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(addressViewColumn, identityOverview.FindProperty("Address")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(createdAtViewColumn0, identityOverview.FindProperty("CreatedAt")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(createdWithClientViewColumn, identityOverview.FindProperty("CreatedWithClient")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(datawalletVersionViewColumn, identityOverview.FindProperty("DatawalletVersion")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(identityVersionViewColumn, identityOverview.FindProperty("IdentityVersion")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(lastLoginAtViewColumn, identityOverview.FindProperty("LastLoginAt")!, identityOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(numberOfDevicesViewColumn, identityOverview.FindProperty("NumberOfDevices")!, identityOverviewsViewMapping);

            var tierDTO0 = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview.Tier#TierDTO")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            tierDTO0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview.Tier#TierDTO", null, relationalModel);
            var identityOverviewAddressColumnBase = new ColumnBase<ColumnMappingBase>("IdentityOverviewAddress", "nvarchar(450)", backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase.Columns.Add("IdentityOverviewAddress", identityOverviewAddressColumnBase);
            var tierIdColumnBase = new ColumnBase<ColumnMappingBase>("TierId", "nvarchar(max)", backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase.Columns.Add("TierId", tierIdColumnBase);
            var tierNameColumnBase = new ColumnBase<ColumnMappingBase>("TierName", "nvarchar(max)", backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase.Columns.Add("TierName", tierNameColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview.Tier#TierDTO", backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase);
            var backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase = new TableMappingBase<ColumnMappingBase>(tierDTO0, backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase, true);
            backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase, false);
            defaultTableMappings2.Add(backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identityOverviewAddressColumnBase, tierDTO0.FindProperty("IdentityOverviewAddress")!, backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierIdColumnBase, tierDTO0.FindProperty("Id")!, backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tierNameColumnBase, tierDTO0.FindProperty("Name")!, backboneAdminUiInfrastructureDTOsIdentityOverviewTierTierDTOMappingBase);

            var viewMappings2 = new List<ViewMapping>();
            tierDTO0.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings2);
            var identityOverviewsViewMapping0 = new ViewMapping(tierDTO0, identityOverviewsView, true)
            {
                IsSharedTablePrincipal = false,
            };
            identityOverviewsView.AddTypeMapping(identityOverviewsViewMapping0, false);
            viewMappings2.Add(identityOverviewsViewMapping0);
            identityOverviewsView.AddRowInternalForeignKey(tierDTO0, RelationalModel.GetForeignKey(this,
                "Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview.Tier#TierDTO",
                new[] { "IdentityOverviewAddress" },
                "Backbone.AdminUi.Infrastructure.DTOs.IdentityOverview",
                new[] { "Address" }));
            RelationalModel.CreateViewColumnMapping(addressViewColumn, tierDTO0.FindProperty("IdentityOverviewAddress")!, identityOverviewsViewMapping0);
            RelationalModel.CreateViewColumnMapping(tierIdViewColumn, tierDTO0.FindProperty("Id")!, identityOverviewsViewMapping0);
            RelationalModel.CreateViewColumnMapping(tierNameViewColumn, tierDTO0.FindProperty("Name")!, identityOverviewsViewMapping0);

            var messageOverview = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.MessageOverview")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            messageOverview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var backboneAdminUiInfrastructureDTOsMessageOverviewTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.MessageOverview", null, relationalModel);
            var messageIdColumnBase = new ColumnBase<ColumnMappingBase>("MessageId", "nvarchar(450)", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.Columns.Add("MessageId", messageIdColumnBase);
            var numberOfAttachmentsColumnBase = new ColumnBase<ColumnMappingBase>("NumberOfAttachments", "int", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.Columns.Add("NumberOfAttachments", numberOfAttachmentsColumnBase);
            var sendDateColumnBase = new ColumnBase<ColumnMappingBase>("SendDate", "datetime2", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.Columns.Add("SendDate", sendDateColumnBase);
            var senderAddressColumnBase = new ColumnBase<ColumnMappingBase>("SenderAddress", "nvarchar(max)", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.Columns.Add("SenderAddress", senderAddressColumnBase);
            var senderDeviceColumnBase = new ColumnBase<ColumnMappingBase>("SenderDevice", "nvarchar(max)", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.Columns.Add("SenderDevice", senderDeviceColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.MessageOverview", backboneAdminUiInfrastructureDTOsMessageOverviewTableBase);
            var backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase = new TableMappingBase<ColumnMappingBase>(messageOverview, backboneAdminUiInfrastructureDTOsMessageOverviewTableBase, true);
            backboneAdminUiInfrastructureDTOsMessageOverviewTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase, false);
            defaultTableMappings3.Add(backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase, messageOverview.FindProperty("MessageId")!, backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberOfAttachmentsColumnBase, messageOverview.FindProperty("NumberOfAttachments")!, backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sendDateColumnBase, messageOverview.FindProperty("SendDate")!, backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)senderAddressColumnBase, messageOverview.FindProperty("SenderAddress")!, backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)senderDeviceColumnBase, messageOverview.FindProperty("SenderDevice")!, backboneAdminUiInfrastructureDTOsMessageOverviewMappingBase);

            var viewMappings3 = new List<ViewMapping>();
            messageOverview.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings3);
            var messageOverviewsView = new View("MessageOverviews", null, relationalModel);
            var messageIdViewColumn = new ViewColumn("MessageId", "nvarchar(450)", messageOverviewsView);
            messageOverviewsView.Columns.Add("MessageId", messageIdViewColumn);
            var numberOfAttachmentsViewColumn = new ViewColumn("NumberOfAttachments", "int", messageOverviewsView);
            messageOverviewsView.Columns.Add("NumberOfAttachments", numberOfAttachmentsViewColumn);
            var sendDateViewColumn = new ViewColumn("SendDate", "datetime2", messageOverviewsView);
            messageOverviewsView.Columns.Add("SendDate", sendDateViewColumn);
            var senderAddressViewColumn = new ViewColumn("SenderAddress", "nvarchar(max)", messageOverviewsView);
            messageOverviewsView.Columns.Add("SenderAddress", senderAddressViewColumn);
            var senderDeviceViewColumn = new ViewColumn("SenderDevice", "nvarchar(max)", messageOverviewsView);
            messageOverviewsView.Columns.Add("SenderDevice", senderDeviceViewColumn);
            relationalModel.Views.Add(("MessageOverviews", null), messageOverviewsView);
            var messageOverviewsViewMapping = new ViewMapping(messageOverview, messageOverviewsView, true);
            messageOverviewsView.AddTypeMapping(messageOverviewsViewMapping, false);
            viewMappings3.Add(messageOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(messageIdViewColumn, messageOverview.FindProperty("MessageId")!, messageOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(numberOfAttachmentsViewColumn, messageOverview.FindProperty("NumberOfAttachments")!, messageOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(sendDateViewColumn, messageOverview.FindProperty("SendDate")!, messageOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(senderAddressViewColumn, messageOverview.FindProperty("SenderAddress")!, messageOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(senderDeviceViewColumn, messageOverview.FindProperty("SenderDevice")!, messageOverviewsViewMapping);

            var messageRecipient = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.MessageRecipient")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            messageRecipient.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var backboneAdminUiInfrastructureDTOsMessageRecipientTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.MessageRecipient", null, relationalModel);
            var addressColumnBase0 = new ColumnBase<ColumnMappingBase>("Address", "nvarchar(450)", backboneAdminUiInfrastructureDTOsMessageRecipientTableBase);
            backboneAdminUiInfrastructureDTOsMessageRecipientTableBase.Columns.Add("Address", addressColumnBase0);
            var messageIdColumnBase0 = new ColumnBase<ColumnMappingBase>("MessageId", "nvarchar(450)", backboneAdminUiInfrastructureDTOsMessageRecipientTableBase);
            backboneAdminUiInfrastructureDTOsMessageRecipientTableBase.Columns.Add("MessageId", messageIdColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.MessageRecipient", backboneAdminUiInfrastructureDTOsMessageRecipientTableBase);
            var backboneAdminUiInfrastructureDTOsMessageRecipientMappingBase = new TableMappingBase<ColumnMappingBase>(messageRecipient, backboneAdminUiInfrastructureDTOsMessageRecipientTableBase, true);
            backboneAdminUiInfrastructureDTOsMessageRecipientTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsMessageRecipientMappingBase, false);
            defaultTableMappings4.Add(backboneAdminUiInfrastructureDTOsMessageRecipientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)addressColumnBase0, messageRecipient.FindProperty("Address")!, backboneAdminUiInfrastructureDTOsMessageRecipientMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageIdColumnBase0, messageRecipient.FindProperty("MessageId")!, backboneAdminUiInfrastructureDTOsMessageRecipientMappingBase);

            var viewMappings4 = new List<ViewMapping>();
            messageRecipient.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings4);
            var messageRecipientsView = new View("MessageRecipients", null, relationalModel);
            var addressViewColumn0 = new ViewColumn("Address", "nvarchar(450)", messageRecipientsView);
            messageRecipientsView.Columns.Add("Address", addressViewColumn0);
            var messageIdViewColumn0 = new ViewColumn("MessageId", "nvarchar(450)", messageRecipientsView);
            messageRecipientsView.Columns.Add("MessageId", messageIdViewColumn0);
            relationalModel.Views.Add(("MessageRecipients", null), messageRecipientsView);
            var messageRecipientsViewMapping = new ViewMapping(messageRecipient, messageRecipientsView, true);
            messageRecipientsView.AddTypeMapping(messageRecipientsViewMapping, false);
            viewMappings4.Add(messageRecipientsViewMapping);
            RelationalModel.CreateViewColumnMapping(addressViewColumn0, messageRecipient.FindProperty("Address")!, messageRecipientsViewMapping);
            RelationalModel.CreateViewColumnMapping(messageIdViewColumn0, messageRecipient.FindProperty("MessageId")!, messageRecipientsViewMapping);

            var relationshipOverview = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.RelationshipOverview")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            relationshipOverview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.RelationshipOverview", null, relationalModel);
            var answeredAtColumnBase = new ColumnBase<ColumnMappingBase>("AnsweredAt", "datetime2", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("AnsweredAt", answeredAtColumnBase);
            var answeredByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("AnsweredByDevice", "nvarchar(max)", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("AnsweredByDevice", answeredByDeviceColumnBase);
            var createdAtColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedAt", "datetime2", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("CreatedAt", createdAtColumnBase1);
            var createdByDeviceColumnBase = new ColumnBase<ColumnMappingBase>("CreatedByDevice", "nvarchar(max)", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("CreatedByDevice", createdByDeviceColumnBase);
            var fromColumnBase = new ColumnBase<ColumnMappingBase>("From", "nvarchar(max)", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("From", fromColumnBase);
            var relationshipTemplateIdColumnBase = new ColumnBase<ColumnMappingBase>("RelationshipTemplateId", "nvarchar(max)", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("RelationshipTemplateId", relationshipTemplateIdColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "int", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("Status", statusColumnBase);
            var toColumnBase = new ColumnBase<ColumnMappingBase>("To", "nvarchar(max)", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.Columns.Add("To", toColumnBase);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.RelationshipOverview", backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase);
            var backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase = new TableMappingBase<ColumnMappingBase>(relationshipOverview, backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase, true);
            backboneAdminUiInfrastructureDTOsRelationshipOverviewTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase, false);
            defaultTableMappings5.Add(backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answeredAtColumnBase, relationshipOverview.FindProperty("AnsweredAt")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)answeredByDeviceColumnBase, relationshipOverview.FindProperty("AnsweredByDevice")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdAtColumnBase1, relationshipOverview.FindProperty("CreatedAt")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByDeviceColumnBase, relationshipOverview.FindProperty("CreatedByDevice")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fromColumnBase, relationshipOverview.FindProperty("From")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)relationshipTemplateIdColumnBase, relationshipOverview.FindProperty("RelationshipTemplateId")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, relationshipOverview.FindProperty("Status")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)toColumnBase, relationshipOverview.FindProperty("To")!, backboneAdminUiInfrastructureDTOsRelationshipOverviewMappingBase);

            var viewMappings5 = new List<ViewMapping>();
            relationshipOverview.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings5);
            var relationshipOverviewsView = new View("RelationshipOverviews", null, relationalModel);
            var answeredAtViewColumn = new ViewColumn("AnsweredAt", "datetime2", relationshipOverviewsView)
            {
                IsNullable = true
            };
            relationshipOverviewsView.Columns.Add("AnsweredAt", answeredAtViewColumn);
            var answeredByDeviceViewColumn = new ViewColumn("AnsweredByDevice", "nvarchar(max)", relationshipOverviewsView)
            {
                IsNullable = true
            };
            relationshipOverviewsView.Columns.Add("AnsweredByDevice", answeredByDeviceViewColumn);
            var createdAtViewColumn1 = new ViewColumn("CreatedAt", "datetime2", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("CreatedAt", createdAtViewColumn1);
            var createdByDeviceViewColumn = new ViewColumn("CreatedByDevice", "nvarchar(max)", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("CreatedByDevice", createdByDeviceViewColumn);
            var fromViewColumn = new ViewColumn("From", "nvarchar(max)", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("From", fromViewColumn);
            var relationshipTemplateIdViewColumn = new ViewColumn("RelationshipTemplateId", "nvarchar(max)", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("RelationshipTemplateId", relationshipTemplateIdViewColumn);
            var statusViewColumn = new ViewColumn("Status", "int", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("Status", statusViewColumn);
            var toViewColumn = new ViewColumn("To", "nvarchar(max)", relationshipOverviewsView);
            relationshipOverviewsView.Columns.Add("To", toViewColumn);
            relationalModel.Views.Add(("RelationshipOverviews", null), relationshipOverviewsView);
            var relationshipOverviewsViewMapping = new ViewMapping(relationshipOverview, relationshipOverviewsView, true);
            relationshipOverviewsView.AddTypeMapping(relationshipOverviewsViewMapping, false);
            viewMappings5.Add(relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(answeredAtViewColumn, relationshipOverview.FindProperty("AnsweredAt")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(answeredByDeviceViewColumn, relationshipOverview.FindProperty("AnsweredByDevice")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(createdAtViewColumn1, relationshipOverview.FindProperty("CreatedAt")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(createdByDeviceViewColumn, relationshipOverview.FindProperty("CreatedByDevice")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(fromViewColumn, relationshipOverview.FindProperty("From")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(relationshipTemplateIdViewColumn, relationshipOverview.FindProperty("RelationshipTemplateId")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(statusViewColumn, relationshipOverview.FindProperty("Status")!, relationshipOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(toViewColumn, relationshipOverview.FindProperty("To")!, relationshipOverviewsViewMapping);

            var tierOverview = FindEntityType("Backbone.AdminUi.Infrastructure.DTOs.TierOverview")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            tierOverview.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var backboneAdminUiInfrastructureDTOsTierOverviewTableBase = new TableBase("Backbone.AdminUi.Infrastructure.DTOs.TierOverview", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(max)", backboneAdminUiInfrastructureDTOsTierOverviewTableBase)
            {
                IsNullable = true
            };
            backboneAdminUiInfrastructureDTOsTierOverviewTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", backboneAdminUiInfrastructureDTOsTierOverviewTableBase);
            backboneAdminUiInfrastructureDTOsTierOverviewTableBase.Columns.Add("Name", nameColumnBase);
            var numberOfIdentitiesColumnBase0 = new ColumnBase<ColumnMappingBase>("NumberOfIdentities", "int", backboneAdminUiInfrastructureDTOsTierOverviewTableBase);
            backboneAdminUiInfrastructureDTOsTierOverviewTableBase.Columns.Add("NumberOfIdentities", numberOfIdentitiesColumnBase0);
            relationalModel.DefaultTables.Add("Backbone.AdminUi.Infrastructure.DTOs.TierOverview", backboneAdminUiInfrastructureDTOsTierOverviewTableBase);
            var backboneAdminUiInfrastructureDTOsTierOverviewMappingBase = new TableMappingBase<ColumnMappingBase>(tierOverview, backboneAdminUiInfrastructureDTOsTierOverviewTableBase, true);
            backboneAdminUiInfrastructureDTOsTierOverviewTableBase.AddTypeMapping(backboneAdminUiInfrastructureDTOsTierOverviewMappingBase, false);
            defaultTableMappings6.Add(backboneAdminUiInfrastructureDTOsTierOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, tierOverview.FindProperty("Id")!, backboneAdminUiInfrastructureDTOsTierOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, tierOverview.FindProperty("Name")!, backboneAdminUiInfrastructureDTOsTierOverviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)numberOfIdentitiesColumnBase0, tierOverview.FindProperty("NumberOfIdentities")!, backboneAdminUiInfrastructureDTOsTierOverviewMappingBase);

            var viewMappings6 = new List<ViewMapping>();
            tierOverview.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings6);
            var tierOverviewsView = new View("TierOverviews", null, relationalModel);
            var idViewColumn = new ViewColumn("Id", "nvarchar(max)", tierOverviewsView)
            {
                IsNullable = true
            };
            tierOverviewsView.Columns.Add("Id", idViewColumn);
            var nameViewColumn = new ViewColumn("Name", "nvarchar(max)", tierOverviewsView);
            tierOverviewsView.Columns.Add("Name", nameViewColumn);
            var numberOfIdentitiesViewColumn0 = new ViewColumn("NumberOfIdentities", "int", tierOverviewsView);
            tierOverviewsView.Columns.Add("NumberOfIdentities", numberOfIdentitiesViewColumn0);
            relationalModel.Views.Add(("TierOverviews", null), tierOverviewsView);
            var tierOverviewsViewMapping = new ViewMapping(tierOverview, tierOverviewsView, true);
            tierOverviewsView.AddTypeMapping(tierOverviewsViewMapping, false);
            viewMappings6.Add(tierOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(idViewColumn, tierOverview.FindProperty("Id")!, tierOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(nameViewColumn, tierOverview.FindProperty("Name")!, tierOverviewsViewMapping);
            RelationalModel.CreateViewColumnMapping(numberOfIdentitiesViewColumn0, tierOverview.FindProperty("NumberOfIdentities")!, tierOverviewsViewMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
