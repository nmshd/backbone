{
    "Authentication": {
        "JwtSigningCertificate": "", // can be empty to use an auto generated development certificate; however, in production scenarios this should definitely be set! Vertical scaling will not work without a fix signing certificate, because each instance would generate its own certificate
        "JwtLifetimeInSeconds": 300
    },
    "Cors": {
        "AllowedOrigins": "",
        "ExposedHeaders": ""
    },
    "SwaggerUi": {
        "TokenUrl": "http://localhost:5000/connect/token",
        "Enabled": true
    },
    "Infrastructure": {
        "EventBus": {
            "Vendor": "RabbitMQ", // possible values: InMemory, RabbitMQ, GoogleCloud, Azure
            "ConnectionInfo": "rabbitmq",

            "RabbitMQUsername": "guest", // only available for RabbitMQ
            "RabbitMQPassword": "guest", // only available for RabbitMQ
            "ConnectionRetryCount": 5, // only available for RabbitMQ

            "GcpPubSubProjectId": "", // only available for Google Cloud Pub/Sub
            "GcpPubSubTopicName": "" // only available for Google Cloud Pub/Sub
        }
    },
    "Modules": {
        "Challenges": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=challenges;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=challenges;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                }
            }
        },
        "Quotas": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=quotas;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=quotas;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                }
            }
        },
        "Devices": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=devices;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=devices;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                },
                "PushNotifications": {
                    "Provider": "Dummy"
                }
            }
        },
        "Files": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=files;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=files;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Messages": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=messages;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=messages;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                }
            }
        },
        "Relationships": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=relationships;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=relationships;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Synchronization": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=synchronization;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=synchronization;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                },
                "BlobStorage": {
                    "CloudProvider": "Azure",
                    "ConnectionInfo": "",
                    "ContainerName": ""
                }
            }
        },
        "Tokens": {
            "Infrastructure": {
                "SqlDatabase": {
                    "Provider": "Postgres",
                    "ConnectionString": "User ID=tokens;Password=Passw0rd;Server=postgres;Port=5432;Database=enmeshed;" // postgres
                    // "ConnectionString": "Server=ms-sql-server;Database=enmeshed;User Id=tokens;Password=Passw0rd;TrustServerCertificate=True" // sqlserver
                }
            }
        }
    },
  "Logging": {
    "MinimumLevel": {
      "Default": "Information",
      "Override": {
        "Backbone": "Debug",
        "Enmeshed": "Debug",
        "ConsumerApi": "Debug"
      }
    },
    "WriteTo": {
      "Seq": {
        "Name": "Seq",
        "Args": {
          "ServerUrl": "http://seq:5341"
        }
      }
    }
  }
}
