// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Backbone.BuildingBlocks.Infrastructure.Persistence.Database.ValueConverters;
using Backbone.Modules.Devices.Domain.Entities.Identities;
using Backbone.Modules.Devices.Infrastructure.Persistence.Database.ValueConverters;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Backbone.Modules.Devices.Infrastructure.CompiledModels.SqlServer
{
    internal partial class IdentityDeletionProcessAuditLogEntryEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Backbone.Modules.Devices.Domain.Entities.Identities.IdentityDeletionProcessAuditLogEntry",
                typeof(IdentityDeletionProcessAuditLogEntry),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(IdentityDeletionProcessAuditLogEntryId),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                maxLength: 20,
                unicode: false,
                valueConverter: new IdentityDeletionProcessAuditLogEntryIdEntityFrameworkValueConverter());
            id.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IdentityDeletionProcessAuditLogEntryId>(
                    (IdentityDeletionProcessAuditLogEntryId v1, IdentityDeletionProcessAuditLogEntryId v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IdentityDeletionProcessAuditLogEntryId v) => v.GetHashCode(),
                    (IdentityDeletionProcessAuditLogEntryId v) => v),
                keyComparer: new ValueComparer<IdentityDeletionProcessAuditLogEntryId>(
                    (IdentityDeletionProcessAuditLogEntryId v1, IdentityDeletionProcessAuditLogEntryId v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IdentityDeletionProcessAuditLogEntryId v) => v.GetHashCode(),
                    (IdentityDeletionProcessAuditLogEntryId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "char(20)",
                    size: 20,
                    dbType: System.Data.DbType.AnsiStringFixedLength),
                converter: new ValueConverter<IdentityDeletionProcessAuditLogEntryId, string>(
                    (IdentityDeletionProcessAuditLogEntryId id) => id.Value,
                    (string value) => IdentityDeletionProcessAuditLogEntryId.Create(value).Value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IdentityDeletionProcessAuditLogEntryId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IdentityDeletionProcessAuditLogEntryId, string>(
                        (IdentityDeletionProcessAuditLogEntryId id) => id.Value,
                        (string value) => IdentityDeletionProcessAuditLogEntryId.Create(value).Value)));
            id.AddAnnotation("Relational:IsFixedLength", true);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeValueConverter());
            createdAt.TypeMapping = SqlServerDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => v.GetHashCode(),
                    (DateTime v) => v),
                converter: new ValueConverter<DateTime, DateTime>(
                    (DateTime v) => v.ToUniversalTime(),
                    (DateTime v) => DateTime.SpecifyKind(v, DateTimeKind.Utc)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTime, DateTime>(
                    JsonDateTimeReaderWriter.Instance,
                    new ValueConverter<DateTime, DateTime>(
                        (DateTime v) => v.ToUniversalTime(),
                        (DateTime v) => DateTime.SpecifyKind(v, DateTimeKind.Utc))));
            createdAt.SetSentinelFromProviderValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc));
            createdAt.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var deviceIdHash = runtimeEntityType.AddProperty(
                "DeviceIdHash",
                typeof(byte[]),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("DeviceIdHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<DeviceIdHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deviceIdHash.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => v.GetHashCode(),
                    (Byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                storeTypePostfix: StoreTypePostfix.None);
            deviceIdHash.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identityAddressHash = runtimeEntityType.AddProperty(
                "IdentityAddressHash",
                typeof(byte[]),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("IdentityAddressHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<IdentityAddressHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            identityAddressHash.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => v.GetHashCode(),
                    (Byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<byte[]>(
                    (Byte[] v1, Byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (Byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (Byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                storeTypePostfix: StoreTypePostfix.None);
            identityAddressHash.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var identityDeletionProcessId = runtimeEntityType.AddProperty(
                "IdentityDeletionProcessId",
                typeof(IdentityDeletionProcessId),
                nullable: true,
                maxLength: 20,
                unicode: false,
                valueConverter: new IdentityDeletionProcessIdEntityFrameworkValueConverter());
            identityDeletionProcessId.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IdentityDeletionProcessId>(
                    (IdentityDeletionProcessId v1, IdentityDeletionProcessId v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IdentityDeletionProcessId v) => v.GetHashCode(),
                    (IdentityDeletionProcessId v) => v),
                keyComparer: new ValueComparer<IdentityDeletionProcessId>(
                    (IdentityDeletionProcessId v1, IdentityDeletionProcessId v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IdentityDeletionProcessId v) => v.GetHashCode(),
                    (IdentityDeletionProcessId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "char(20)",
                    size: 20,
                    dbType: System.Data.DbType.AnsiStringFixedLength),
                converter: new ValueConverter<IdentityDeletionProcessId, string>(
                    (IdentityDeletionProcessId id) => id.Value,
                    (string value) => IdentityDeletionProcessId.Create(value).Value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IdentityDeletionProcessId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IdentityDeletionProcessId, string>(
                        (IdentityDeletionProcessId id) => id.Value,
                        (string value) => IdentityDeletionProcessId.Create(value).Value)));
            identityDeletionProcessId.AddAnnotation("Relational:IsFixedLength", true);
            identityDeletionProcessId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var message = runtimeEntityType.AddProperty(
                "Message",
                typeof(string),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("Message", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<Message>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            message.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            message.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var newStatus = runtimeEntityType.AddProperty(
                "NewStatus",
                typeof(DeletionProcessStatus),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("NewStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<NewStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            newStatus.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<DeletionProcessStatus>(
                    (DeletionProcessStatus v1, DeletionProcessStatus v2) => object.Equals((object)v1, (object)v2),
                    (DeletionProcessStatus v) => v.GetHashCode(),
                    (DeletionProcessStatus v) => v),
                keyComparer: new ValueComparer<DeletionProcessStatus>(
                    (DeletionProcessStatus v1, DeletionProcessStatus v2) => object.Equals((object)v1, (object)v2),
                    (DeletionProcessStatus v) => v.GetHashCode(),
                    (DeletionProcessStatus v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<DeletionProcessStatus, int>(
                    (DeletionProcessStatus value) => (int)value,
                    (int value) => (DeletionProcessStatus)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DeletionProcessStatus, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<DeletionProcessStatus, int>(
                        (DeletionProcessStatus value) => (int)value,
                        (int value) => (DeletionProcessStatus)value)));
            newStatus.SetSentinelFromProviderValue(0);
            newStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var oldStatus = runtimeEntityType.AddProperty(
                "OldStatus",
                typeof(DeletionProcessStatus?),
                propertyInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetProperty("OldStatus", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcessAuditLogEntry).GetField("<OldStatus>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            oldStatus.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<DeletionProcessStatus?>(
                    (Nullable<DeletionProcessStatus> v1, Nullable<DeletionProcessStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(DeletionProcessStatus)v1, (object)(DeletionProcessStatus)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<DeletionProcessStatus> v) => v.HasValue ? ((DeletionProcessStatus)v).GetHashCode() : 0,
                    (Nullable<DeletionProcessStatus> v) => v.HasValue ? (Nullable<DeletionProcessStatus>)(DeletionProcessStatus)v : default(Nullable<DeletionProcessStatus>)),
                keyComparer: new ValueComparer<DeletionProcessStatus?>(
                    (Nullable<DeletionProcessStatus> v1, Nullable<DeletionProcessStatus> v2) => v1.HasValue && v2.HasValue && object.Equals((object)(DeletionProcessStatus)v1, (object)(DeletionProcessStatus)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<DeletionProcessStatus> v) => v.HasValue ? ((DeletionProcessStatus)v).GetHashCode() : 0,
                    (Nullable<DeletionProcessStatus> v) => v.HasValue ? (Nullable<DeletionProcessStatus>)(DeletionProcessStatus)v : default(Nullable<DeletionProcessStatus>)),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<DeletionProcessStatus, int>(
                    (DeletionProcessStatus value) => (int)value,
                    (int value) => (DeletionProcessStatus)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DeletionProcessStatus, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<DeletionProcessStatus, int>(
                        (DeletionProcessStatus value) => (int)value,
                        (int value) => (DeletionProcessStatus)value)));
            oldStatus.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { identityDeletionProcessId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("IdentityDeletionProcessId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var auditLog = principalEntityType.AddNavigation("AuditLog",
                runtimeForeignKey,
                onDependent: false,
                typeof(IReadOnlyList<IdentityDeletionProcessAuditLogEntry>),
                propertyInfo: typeof(IdentityDeletionProcess).GetProperty("AuditLog", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityDeletionProcess).GetField("_auditLog", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "IdentityDeletionProcessAuditLog");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
